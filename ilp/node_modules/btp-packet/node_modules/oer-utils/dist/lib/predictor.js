"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("./util");
class Predictor {
    constructor() {
        this.size = 0;
    }
    get length() {
        return this.size;
    }
    writeUInt(value, length) {
        this.size += length;
    }
    writeInt(value, length) {
        this.size += length;
    }
    writeVarUInt(_value) {
        if (!util_1.isInteger(_value)) {
            throw new Error('UInt must be an integer');
        }
        let lengthOfValue;
        if (typeof _value === 'number') {
            if (_value < 0) {
                throw new Error('UInt must be positive');
            }
            lengthOfValue = util_1.getUIntBufferSize(_value);
        }
        else {
            const value = util_1.longFromValue(_value, true);
            lengthOfValue = util_1.getLongUIntBufferSize(value);
        }
        this.skipVarOctetString(lengthOfValue);
    }
    writeVarInt(_value) {
        if (!util_1.isInteger(_value)) {
            throw new Error('UInt must be an integer');
        }
        let lengthOfValue;
        if (typeof _value === 'number') {
            lengthOfValue = util_1.getIntBufferSize(_value);
        }
        else {
            const value = util_1.longFromValue(_value, false);
            lengthOfValue = util_1.getLongIntBufferSize(value);
        }
        this.skipVarOctetString(lengthOfValue);
    }
    writeOctetString(buffer, length) {
        if (buffer.length !== length) {
            throw new Error('Incorrect length for octet string (actual: ' +
                buffer.length +
                ', expected: ' +
                length +
                ')');
        }
        this.skip(length);
    }
    writeVarOctetString(buffer) {
        this.skipVarOctetString(buffer.length);
    }
    createVarOctetString(length) {
        this.skipVarOctetString(length);
        return new Predictor();
    }
    write(bytes) {
        this.size += bytes.length;
    }
    skip(bytes) {
        this.size += bytes;
    }
    getSize() {
        return this.size;
    }
    static measureVarOctetString(length) {
        let total = 1;
        if (length > 127) {
            const lengthOfLength = util_1.getUIntBufferSize(length);
            total += lengthOfLength;
        }
        total += length;
        return total;
    }
    skipVarOctetString(length) {
        this.skip(Predictor.measureVarOctetString(length));
    }
}
;
[1, 2, 4, 8].forEach((bytes) => {
    Predictor.prototype['writeUInt' + bytes * 8] = function (value) {
        return this.writeUInt(value, bytes);
    };
    Predictor.prototype['writeInt' + bytes * 8] = function (value) {
        return this.writeUInt(value, bytes);
    };
});
exports.default = Predictor;
//# sourceMappingURL=predictor.js.map