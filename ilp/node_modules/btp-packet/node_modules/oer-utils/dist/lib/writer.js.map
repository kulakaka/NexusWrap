{"version":3,"file":"writer.js","sourceRoot":"","sources":["../../src/lib/writer.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  isInteger,\n  isLong,\n  longFromValue,\n  longToBuffer,\n  MAX_SAFE_BYTES,\n  getLongIntBufferSize,\n  getLongUIntBufferSize,\n  getIntBufferSize,\n  getUIntBufferSize,\n} from './util'\nimport * as Long from 'long'\n\ntype LongValue = Long | number | string\n\nclass Writer implements WriterInterface {\n  // Largest value that can be written as a variable-length unsigned integer\n  static MAX_SAFE_INTEGER = 0x1fffffffffffff\n  static MIN_SAFE_INTEGER = -0x1fffffffffffff\n  static MIN_BUFFER_SIZE = 32\n\n  // The UINT_RANGES and INT_RANGES are only used up to util.MAX_SAFE_BYTES.\n  // After that the buffer length is determined using getUIntBufferSize and\n  // getIntBufferSize.\n  static UINT_RANGES = {\n    1: 0xff,\n    2: 0xffff,\n    3: 0xffffff,\n    4: 0xffffffff,\n    5: 0xffffffffff,\n    6: 0xffffffffffff,\n  }\n\n  static INT_RANGES = {\n    1: [-0x80, 0x7f],\n    2: [-0x8000, 0x7fff],\n    3: [-0x800000, 0x7fffff],\n    4: [-0x80000000, 0x7fffffff],\n    5: [-0x8000000000, 0x7fffffffff],\n    6: [-0x800000000000, 0x7fffffffffff],\n  }\n\n  private buffer: Buffer\n  private _offset: number\n  private strict: boolean\n\n  /**\n   * @param value Optional. Either a Buffer to use, or a capacity to allocate. If an explicit capacity or buffer is passed, the writer will throw if more bytes are written.\n   */\n  constructor(value?: number | Buffer) {\n    if (Buffer.isBuffer(value)) {\n      this.buffer = value\n      this.strict = true\n    } else {\n      // capacity\n      this.buffer = Buffer.alloc(value || 0)\n      this.strict = typeof value === 'number'\n    }\n    this._offset = 0\n  }\n\n  get length(): number {\n    return this._offset\n  }\n\n  /**\n   * Write a fixed-length unsigned integer to the stream.\n   *\n   * @param {number | string | Long} value Value to write. Must be in range for the given length.\n   * @param length Number of bytes to encode this value as.\n   */\n  writeUInt(_value: LongValue, length: number): void {\n    if (!isInteger(_value)) {\n      throw new Error('UInt must be an integer')\n    } else if (typeof _value === 'number' && _value > Writer.MAX_SAFE_INTEGER) {\n      throw new Error('UInt is larger than safe JavaScript range (try using Longs instead)')\n    } else if (length <= 0) {\n      throw new Error('UInt length must be greater than zero')\n    } else if (isLong(_value) && !_value.unsigned) {\n      throw new Error('Expected unsigned Long')\n    }\n\n    if (length <= MAX_SAFE_BYTES) {\n      const value = Number(_value)\n      if (value < 0) {\n        throw new Error('UInt must be positive')\n      } else if (value > Writer.UINT_RANGES[length]) {\n        throw new Error(`UInt ${_value} does not fit in ${length} bytes`)\n      }\n\n      const offset = this.advance(length)\n      this.buffer.writeUIntBE(value, offset, length)\n    } else {\n      const value = longFromValue(_value, true)\n      if (length < getLongUIntBufferSize(value)) {\n        throw new Error(`UInt ${value} does not fit in ${length} bytes`)\n      }\n\n      this.write(longToBuffer(value, length))\n    }\n  }\n\n  /**\n   * Write a fixed-length signed integer to the stream.\n   *\n   * @param {number | string | Long} value Value to write. Must be in range for the given length.\n   * @param length Number of bytes to encode this value as.\n   */\n  writeInt(_value: LongValue, length: number): void {\n    if (!isInteger(_value)) {\n      throw new Error('Int must be an integer')\n    } else if (length <= 0) {\n      throw new Error('Int length must be greater than zero')\n    } else if (typeof _value === 'number' && _value > Writer.MAX_SAFE_INTEGER) {\n      throw new Error('Int is larger than safe JavaScript range (try using Longs instead)')\n    } else if (typeof _value === 'number' && _value < Writer.MIN_SAFE_INTEGER) {\n      throw new Error('Int is smaller than safe JavaScript range (try using Longs instead)')\n    } else if (isLong(_value) && _value.unsigned) {\n      throw new Error('Expected signed Long')\n    }\n\n    if (length <= MAX_SAFE_BYTES) {\n      const value = Number(_value)\n      if (value < Writer.INT_RANGES[length][0] || value > Writer.INT_RANGES[length][1]) {\n        throw new Error('Int ' + _value + ' does not fit in ' + length + ' bytes')\n      }\n\n      const offset = this.advance(length)\n      this.buffer.writeIntBE(value, offset, length)\n    } else {\n      const value = longFromValue(_value, false)\n      if (length < getLongIntBufferSize(value)) {\n        throw new Error('Int ' + value + ' does not fit in ' + length + ' bytes')\n      }\n\n      this.write(longToBuffer(value, length))\n    }\n  }\n\n  /**\n   * Write a variable length unsigned integer to the stream.\n   *\n   * We need to first turn the integer into a buffer in big endian order, then\n   * we write the buffer as an octet string.\n   *\n   * @param {number | string | Long | Buffer} value Integer to represent.\n   */\n  writeVarUInt(_value: LongValue | Buffer): void {\n    if (Buffer.isBuffer(_value)) {\n      // If the integer was already passed as a buffer, we can just treat it as\n      // an octet string.\n      this.writeVarOctetString(_value)\n      return\n    } else if (!isInteger(_value)) {\n      throw new Error('UInt must be an integer')\n    }\n\n    let value\n    let lengthOfValue\n    if (typeof _value === 'number') {\n      value = _value\n      lengthOfValue = getUIntBufferSize(value)\n    } else {\n      value = longFromValue(_value, true)\n      lengthOfValue = getLongUIntBufferSize(value)\n    }\n\n    this.createVarOctetString(lengthOfValue).writeUInt(value, lengthOfValue)\n  }\n\n  /**\n   * Write a variable length signed integer to the stream.\n   *\n   * We need to first turn the integer into a buffer in big endian order, then\n   * we write the buffer as an octet string.\n   *\n   * @param {number | string | Long | Buffer} value Integer to represent.\n   */\n  writeVarInt(_value: LongValue | Buffer): void {\n    if (Buffer.isBuffer(_value)) {\n      // If the integer was already passed as a buffer, we can just treat it as\n      // an octet string.\n      this.writeVarOctetString(_value)\n      return\n    } else if (!isInteger(_value)) {\n      throw new Error('Int must be an integer')\n    } else if (typeof _value === 'number' && _value > Writer.MAX_SAFE_INTEGER) {\n      throw new Error('Int is larger than safe JavaScript range')\n    } else if (typeof _value === 'number' && _value < Writer.MIN_SAFE_INTEGER) {\n      throw new Error('Int is smaller than safe JavaScript range')\n    }\n\n    let value\n    let lengthOfValue\n    if (typeof _value === 'number') {\n      value = _value\n      lengthOfValue = getIntBufferSize(value)\n    } else {\n      value = longFromValue(_value, false)\n      lengthOfValue = getLongIntBufferSize(value)\n    }\n\n    this.createVarOctetString(lengthOfValue).writeInt(value, lengthOfValue)\n  }\n\n  /**\n   * Write a fixed-length octet string.\n   *\n   * Mostly just a raw write, but this method enforces the length of the\n   * provided buffer is correct.\n   *\n   * @param buffer Data to write.\n   * @param length Length of data according to the format.\n   */\n  writeOctetString(buffer: Buffer, length: number): void {\n    if (buffer.length !== length) {\n      throw new Error(\n        'Incorrect length for octet string (actual: ' +\n          buffer.length +\n          ', expected: ' +\n          length +\n          ')'\n      )\n    }\n    this.write(buffer)\n  }\n\n  /**\n   * Write a variable-length octet string.\n   *\n   * A variable-length octet string is a length-prefixed set of arbitrary bytes.\n   *\n   * @param buffer Contents of the octet string.\n   */\n  writeVarOctetString(buffer: Buffer): void {\n    if (Buffer.isBuffer(buffer)) {\n      this._writeLengthPrefix(buffer.length)\n      this.write(buffer)\n    } else {\n      throw new TypeError('Expects a buffer')\n    }\n  }\n\n  /**\n   * Write an OER-encoded variable-length octet string with the provided length.\n   *\n   * The returned Writer is only valid until another method is called on the\n   * parent writer, since the buffer may be replaced.\n   *\n   * Writing more than `length` bytes will throw.\n   *\n   * @param length Length of the octet string.\n   */\n  createVarOctetString(length: number): Writer {\n    if (length < 0) {\n      throw new Error('length must be non-negative')\n    }\n    this._writeLengthPrefix(length)\n    const offset = this.advance(length)\n    const slice = this.buffer.slice(offset, offset + length)\n    return new Writer(slice)\n  }\n\n  private _writeLengthPrefix(length: number): void {\n    const MSB = 0x80\n    if (length <= 127) {\n      // For buffers shorter than 128 bytes, we simply prefix the length as a\n      // single byte.\n      this.writeUInt8(length)\n    } else {\n      // For buffers longer than 128 bytes, we first write a single byte\n      // containing the length of the length in bytes, with the most significant\n      // bit set.\n      const lengthOfLength = getUIntBufferSize(length)\n      this.writeUInt8(MSB | lengthOfLength)\n\n      // Then we write the length of the buffer in that many bytes.\n      this.writeUInt(length, lengthOfLength)\n    }\n  }\n\n  /**\n   * Write a series of raw bytes.\n   *\n   * Adds the given bytes to the output buffer.\n   *\n   * @param buffer Bytes to write.\n   */\n  write(buffer: Buffer): void {\n    const offset = this.advance(buffer.length)\n    buffer.copy(this.buffer, offset)\n  }\n\n  /**\n   * Returns the buffer containing the serialized data that was written using\n   * this writer.\n   */\n  getBuffer(): Buffer {\n    // ST: The following debug statement is very useful, so I finally decided to\n    // commit it...\n    // console.log(this.components.map((x) => x.toString('hex')).join(' '))\n\n    return this.buffer.slice(0, this._offset)\n  }\n\n  /**\n   * Ensure that the buffer has the capacity to fit `advanceBy` bytes, reallocating\n   * a larger buffer if necessary.\n   */\n  private advance(advanceBy: number): number {\n    const srcOffset = this._offset\n    const minCapacity = srcOffset + advanceBy\n    if (minCapacity <= this.buffer.length) {\n      // Fast path: the buffer already has the capacity for the new data.\n      this._offset += advanceBy\n      return srcOffset\n    }\n\n    if (this.strict) {\n      throw new Error('writer cannot exceed capacity')\n    }\n\n    let capacity = this.buffer.length || Writer.MIN_BUFFER_SIZE\n    while (capacity < minCapacity) capacity *= 2\n\n    const newBuffer = Buffer.alloc(capacity)\n    if (this.buffer.length) {\n      this.buffer.copy(newBuffer)\n    }\n    this.buffer = newBuffer\n    this._offset += advanceBy\n    return srcOffset\n  }\n}\n\ninterface Writer {\n  writeUInt8(value: LongValue): undefined\n  writeUInt16(value: LongValue): undefined\n  writeUInt32(value: LongValue): undefined\n  writeUInt64(value: LongValue): undefined\n  writeInt8(value: LongValue): undefined\n  writeInt16(value: LongValue): undefined\n  writeInt32(value: LongValue): undefined\n  writeInt64(value: LongValue): undefined\n}\n\n// Create write(U)Int{8,16,32,64} shortcuts\n;[1, 2, 4, 8].forEach((bytes) => {\n  Writer.prototype['writeUInt' + bytes * 8] = function (value: number) {\n    this.writeUInt(value, bytes)\n  }\n\n  Writer.prototype['writeInt' + bytes * 8] = function (value: number) {\n    this.writeInt(value, bytes)\n  }\n})\n\nexport interface WriterInterface {\n  readonly length: number\n  writeUInt(_value: LongValue, length: number): void\n  writeInt(_value: LongValue, length: number): void\n  writeVarUInt(_value: LongValue | Buffer): void\n  writeVarInt(_value: LongValue | Buffer): void\n  writeOctetString(buffer: Buffer, length: number): void\n  writeVarOctetString(buffer: Buffer): void\n  createVarOctetString(length: number): WriterInterface\n  write(buffer: Buffer): void\n\n  writeUInt8(value: LongValue): undefined\n  writeUInt16(value: LongValue): undefined\n  writeUInt32(value: LongValue): undefined\n  writeUInt64(value: LongValue): undefined\n  writeInt8(value: LongValue): undefined\n  writeInt16(value: LongValue): undefined\n  writeInt32(value: LongValue): undefined\n  writeInt64(value: LongValue): undefined\n}\n\nexport default Writer\n"]}