/// <reference types="node" />
export declare enum Type {
    TYPE_RESPONSE = 1,
    TYPE_ERROR = 2,
    TYPE_MESSAGE = 6,
    TYPE_TRANSFER = 7
}
export declare const TYPE_RESPONSE = Type.TYPE_RESPONSE;
export declare const TYPE_ERROR = Type.TYPE_ERROR;
export declare const TYPE_MESSAGE = Type.TYPE_MESSAGE;
export declare const TYPE_TRANSFER = Type.TYPE_TRANSFER;
export declare const MIME_APPLICATION_OCTET_STREAM = 0;
export declare const MIME_TEXT_PLAIN_UTF8 = 1;
export declare const MIME_APPLICATION_JSON = 2;
export declare function typeToString(type: Type): "TYPE_RESPONSE" | "TYPE_ERROR" | "TYPE_MESSAGE" | "TYPE_TRANSFER";
export declare function registerProtocolNames(names: string[]): void;
export declare function base64url(input: Buffer): string;
export interface ProtocolData {
    protocolName: string;
    contentType: number;
    data: Buffer;
}
export interface BtpTransfer {
    amount: string;
    protocolData: ProtocolData[];
}
export interface BtpError {
    code: string;
    name: string;
    triggeredAt: string;
    data: string;
    protocolData: ProtocolData[];
}
export interface BtpMessage {
    protocolData: ProtocolData[];
}
export interface BtpMessagePacket {
    type: Type.TYPE_MESSAGE;
    requestId: number;
    data: BtpMessage;
}
export interface BtpResponsePacket {
    type: Type.TYPE_RESPONSE;
    requestId: number;
    data: BtpMessage;
}
export interface BtpTransferPacket {
    type: Type.TYPE_TRANSFER;
    requestId: number;
    data: BtpTransfer;
}
export interface BtpErrorPacket {
    type: Type.TYPE_ERROR;
    requestId: number;
    data: BtpError;
}
export declare type BtpPacket = BtpResponsePacket | BtpMessagePacket | BtpTransferPacket | BtpErrorPacket;
export declare function serialize(obj: BtpPacket): Buffer;
export declare function deserialize(buffer: Buffer): {
    type: Type;
    requestId: number;
    data: BtpTransfer | {
        code: string;
        name: string;
        triggeredAt: Date;
        data: string;
        protocolData: {
            protocolName: string;
            contentType: number;
            data: Buffer;
        }[];
    } | {
        protocolData: {
            protocolName: string;
            contentType: number;
            data: Buffer;
        }[];
    };
};
interface BtpTransferWithoutProtocolData {
    amount: string;
}
interface BtpErrorWithoutProtocolData {
    code: string;
    name: string;
    triggeredAt: string;
    data: string;
}
export declare const serializeResponse: (requestId: number, protocolData: ProtocolData[]) => Buffer;
export declare const serializeError: (error: BtpErrorWithoutProtocolData, requestId: number, protocolData: ProtocolData[]) => Buffer;
export declare const serializeMessage: (requestId: number, protocolData: ProtocolData[]) => Buffer;
export declare const serializeTransfer: (transfer: BtpTransferWithoutProtocolData, requestId: number, protocolData: ProtocolData[]) => Buffer;
export {};
