{"version":3,"file":"index.js","sourceRoot":"","sources":["../index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Predictor, Reader, Writer, WriterInterface } from 'oer-utils'\nimport dateFormat = require('dateformat')\n\n// These constants are increased by 1 for BTP version Alpha\nexport enum Type {\n  TYPE_RESPONSE = 1,\n  TYPE_ERROR = 2,\n  TYPE_MESSAGE = 6,\n  TYPE_TRANSFER = 7\n}\n\nexport const TYPE_RESPONSE = Type.TYPE_RESPONSE\nexport const TYPE_ERROR = Type.TYPE_ERROR\nexport const TYPE_MESSAGE = Type.TYPE_MESSAGE\nexport const TYPE_TRANSFER = Type.TYPE_TRANSFER\n\nexport const MIME_APPLICATION_OCTET_STREAM = 0\nexport const MIME_TEXT_PLAIN_UTF8 = 1\nexport const MIME_APPLICATION_JSON = 2\n\nexport function typeToString (type: Type) {\n  switch (type) {\n    case Type.TYPE_RESPONSE: return 'TYPE_RESPONSE'\n    case Type.TYPE_ERROR: return 'TYPE_ERROR'\n    case Type.TYPE_MESSAGE: return 'TYPE_MESSAGE'\n    case Type.TYPE_TRANSFER: return 'TYPE_TRANSFER'\n    default: throw new Error('Unrecognized BTP packet type')\n  }\n}\n\nconst GENERALIZED_TIME_REGEX =\n  /^([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2}\\.[0-9]{3}Z)$/\n\nconst protocolNameCache: {[s: string]: Buffer} = {}\n\n// Generate a cache of the most commonly used BTP subprotocol names.\n// The goal is to avoid an extra buffer allocation when serializing.\nregisterProtocolNames([\n  'ilp',\n  // BTP authentication:\n  'auth',\n  'auth_username',\n  'auth_token',\n  // ilp-plugin-xrp-asym-{client,server}:\n  'channel',\n  'channel_signature',\n  'claim',\n  'fund_channel',\n  'info',\n  'last_claim'\n])\n\nexport function registerProtocolNames (names: string[]) {\n  // Cache the most common BTP subprotocol names so that a new buffer doesn't need\n  // to be allocated each serialize().\n  for (const protocolName of names) {\n    protocolNameCache[protocolName] = Buffer.from(protocolName, 'ascii')\n  }\n}\n\n// Notes about variable naming - comparison with asn.1 definition:\n//\n// The term 'Envelope' here correspond to the\n// whole BilateralTransferProtocolPacket, see:\n// https://github.com/interledger/rfcs/blob/master/asn1/BilateralTransferProtocol.asn\n\nexport function base64url (input: Buffer) {\n  return input.toString('base64')\n    .replace(/=/g, '')\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_')\n}\n\nfunction toGeneralizedTimeBuffer (date: string) {\n  return Buffer.from(dateFormat(date, \"UTC:yyyymmddHHMMss.l'Z'\"))\n}\n\nfunction readGeneralizedTime (reader: Reader) {\n  const generalizedTime = reader.readVarOctetString().toString()\n  const date = generalizedTime.replace(\n    GENERALIZED_TIME_REGEX,\n    '$1-$2-$3T$4:$5:$6')\n\n  return new Date(date)\n}\n\nexport interface ProtocolData {\n  protocolName: string\n  contentType: number\n  data: Buffer\n}\n\nfunction writeProtocolData (writer: WriterInterface, protocolData: ProtocolData[]) {\n  if (!Array.isArray(protocolData)) {\n    throw new Error('protocolData must be an array')\n  }\n\n  const lengthPrefix = protocolData.length\n  const lengthPrefixLengthPrefix = Math.max(1,\n    Math.ceil((Math.log(protocolData.length + 1) / Math.log(2)) / 8))\n\n  writer.writeUInt8(lengthPrefixLengthPrefix)\n  writer.writeUInt(lengthPrefix, lengthPrefixLengthPrefix)\n\n  for (const p of protocolData) {\n    writer.writeVarOctetString(\n      protocolNameCache[p.protocolName] ||\n      Buffer.from(p.protocolName, 'ascii'))\n    writer.writeUInt8(p.contentType)\n    writer.writeVarOctetString(p.data)\n  }\n}\n\nfunction readProtocolData (reader: Reader) {\n  const lengthPrefixPrefix = reader.readUInt8Number()\n  const lengthPrefix = reader.readUIntNumber(lengthPrefixPrefix)\n  const protocolData = []\n  for (let i = 0; i < lengthPrefix; ++i) {\n    const protocolName = reader.readVarOctetString().toString('ascii')\n    const contentType = reader.readUInt8Number()\n    const data = reader.readVarOctetString()\n    protocolData.push({\n      protocolName,\n      contentType,\n      data\n    })\n  }\n\n  return protocolData\n}\n\nexport interface BtpTransfer {\n  amount: string\n  protocolData: ProtocolData[]\n}\n\nfunction writeTransfer (writer: WriterInterface, data: BtpTransfer) {\n  writer.writeUInt64(data.amount)\n  writeProtocolData(writer, data.protocolData)\n}\n\nexport interface BtpError {\n  code: string\n  name: string\n  triggeredAt: string\n  data: string\n  protocolData: ProtocolData[]\n}\n\nfunction writeError (writer: WriterInterface, data: BtpError) {\n  if (data.code.length !== 3) {\n    throw new Error(`error code must be 3 characters, got: \"${data.code}\"`)\n  }\n\n  const codeBuffer = Buffer.from(data.code, 'ascii')\n  const nameBuffer = Buffer.from(data.name, 'ascii')\n  const triggeredAtBuffer = toGeneralizedTimeBuffer(data.triggeredAt)\n  const dataBuffer = Buffer.from(data.data, 'utf8')\n\n  writer.write(codeBuffer)\n  writer.writeVarOctetString(nameBuffer)\n  writer.writeVarOctetString(triggeredAtBuffer)\n  writer.writeVarOctetString(dataBuffer)\n\n  writeProtocolData(writer, data.protocolData)\n}\n\nexport interface BtpMessage {\n  protocolData: ProtocolData[]\n}\n\nexport interface BtpMessagePacket {\n  type: Type.TYPE_MESSAGE\n  requestId: number\n  data: BtpMessage\n}\n\nexport interface BtpResponsePacket {\n  type: Type.TYPE_RESPONSE\n  requestId: number\n  data: BtpMessage\n}\n\nexport interface BtpTransferPacket {\n  type: Type.TYPE_TRANSFER\n  requestId: number\n  data: BtpTransfer\n}\n\nexport interface BtpErrorPacket {\n  type: Type.TYPE_ERROR\n  requestId: number\n  data: BtpError\n}\n\nexport type BtpPacket = BtpResponsePacket | BtpMessagePacket | BtpTransferPacket | BtpErrorPacket\n\nfunction writeContents (writer: WriterInterface, obj: BtpPacket) {\n  switch (obj.type) {\n    case Type.TYPE_RESPONSE:\n    case Type.TYPE_MESSAGE:\n      writeProtocolData(writer, obj.data.protocolData)\n      break\n    case Type.TYPE_TRANSFER:\n      writeTransfer(writer, obj.data)\n      break\n    case Type.TYPE_ERROR:\n      writeError(writer, obj.data)\n      break\n    default:\n      throw new Error('Unrecognized type')\n  }\n}\n\nexport function serialize (obj: BtpPacket): Buffer {\n  const contentsPredictor = new Predictor()\n  writeContents(contentsPredictor, obj)\n  const envelopeSize = 1 + 4 +\n    Predictor.measureVarOctetString(contentsPredictor.length)\n\n  const envelopeWriter = new Writer(envelopeSize)\n  envelopeWriter.writeUInt8(obj.type)\n  envelopeWriter.writeUInt32(obj.requestId)\n  const contentsWriter = envelopeWriter.createVarOctetString(contentsPredictor.length)\n  writeContents(contentsWriter, obj)\n  return envelopeWriter.getBuffer()\n}\n\nfunction readTransfer (reader: Reader): BtpTransfer {\n  const amount = reader.readUInt64()\n  const protocolData = readProtocolData(reader)\n  return { amount, protocolData }\n}\n\nfunction readError (reader: Reader) {\n  const code = reader.read(3).toString('ascii')\n  const name = reader.readVarOctetString().toString('ascii')\n  const triggeredAt = readGeneralizedTime(reader)\n  const data = reader.readVarOctetString().toString('utf8')\n  const protocolData = readProtocolData(reader)\n\n  return { code, name, triggeredAt, data, protocolData }\n}\n\nexport function deserialize (buffer: Buffer) {\n  const envelopeReader = Reader.from(buffer)\n\n  const type = envelopeReader.readUInt8Number()\n  const requestId = envelopeReader.readUInt32Number()\n  const dataBuff = envelopeReader.readVarOctetString()\n  const reader = new Reader(dataBuff)\n  let data\n  switch (type) {\n    case Type.TYPE_RESPONSE:\n    case Type.TYPE_MESSAGE:\n      data = { protocolData: readProtocolData(reader) }\n      break\n\n    case Type.TYPE_TRANSFER:\n      data = readTransfer(reader)\n      break\n\n    case Type.TYPE_ERROR:\n      data = readError(reader)\n      break\n\n    default:\n      throw new Error('Unrecognized type')\n  }\n\n  return { type, requestId, data }\n}\n\ninterface BtpTransferWithoutProtocolData {\n  amount: string\n}\n\ninterface BtpErrorWithoutProtocolData {\n  code: string\n  name: string\n  triggeredAt: string\n  data: string\n}\n\n// The following functions use an alternative format to access the exposed\n// serialize/deserialize functionality. There is one such serialize* function per BTP call.\n// The arguments passed to them are aligned with the objects defined in the Ledger-Plugin-Interface (LPI),\n// which makes these functions convenient to use when working with LPI objects.\nexport const serializeResponse = (requestId: number, protocolData: ProtocolData[]) => {\n  return serialize({\n    type: Type.TYPE_RESPONSE,\n    requestId,\n    data: { protocolData }\n  })\n}\nexport const serializeError = (error: BtpErrorWithoutProtocolData, requestId: number, protocolData: ProtocolData[]) => {\n  let dataFields\n  const { code, name, triggeredAt, data } = error\n  dataFields = { code, name, triggeredAt, data, protocolData }\n  return serialize({\n    type: Type.TYPE_ERROR,\n    requestId,\n    data: dataFields\n  })\n}\nexport const serializeMessage = (requestId: number, protocolData: ProtocolData[]) => {\n  return serialize({\n    type: Type.TYPE_MESSAGE,\n    requestId,\n    data: { protocolData }\n  })\n}\nexport const serializeTransfer = (transfer: BtpTransferWithoutProtocolData, requestId: number, protocolData: ProtocolData[]) => {\n  const { amount } = transfer\n  return serialize({\n    type: Type.TYPE_TRANSFER,\n    requestId,\n    data: {\n      amount,\n      protocolData\n    }\n  })\n}\n"]}