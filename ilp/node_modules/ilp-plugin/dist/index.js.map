{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAAgC;AAChC,6BAAyB;AACzB,4DAAqC;AAErC,MAAM,GAAG,GAAG,IAAA,oBAAY,EAAC,YAAY,CAAC,CAAA;AAkBtC,MAAM,mBAAmB,GAAG,CAAC,IAAwB,EAAE,EAAE;IACvD,IAAI,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE;QAC/B,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAA;KAC/C;IAED,MAAM,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;IACrD,MAAM,IAAI,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAA;IAEtC,IAAI,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE;QAC9B,MAAM,GAAG,GAAG,IAAI,SAAG,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAA;QAC/C,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAA;QACnB,GAAG,CAAC,QAAQ,GAAG,MAAM,CAAA;QACrB,OAAO,EAAE,MAAM,EAAE,GAAG,CAAC,IAAI,EAAE,CAAA;KAC5B;IAED,OAAO,EAAE,MAAM,EAAE,YAAY,IAAI,IAAI,MAAM,iBAAiB,EAAE,CAAA;AAChE,CAAC,CAAA;AAEY,QAAA,qBAAqB,GAAG,UAAU,IAAwB;IACrE,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,gBAAgB,CAAA;IACzD,MAAM,WAAW,GAAG,mBAAmB,CAAC,IAAI,CAAC,CAAA;IAE7C,GAAG,CAAC,KAAK,CAAC,6BAA6B,EAAE,MAAM,CAAC,CAAA;IAChD,GAAG,CAAC,KAAK,CAAC,kCAAkC,EAAE,WAAW,CAAC,CAAA;IAG1D,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;IAC9B,OAAO,IAAI,MAAM,CAAC,WAAW,CAAC,CAAA;AAChC,CAAiB,CAAA;AAQjB,6BAAqB,CAAC,qBAAqB,GAAG,6BAAqB,CAAA;AACnE,6BAAqB,CAAC,OAAO,GAAG,6BAAqB,CAAA;AACrD,kBAAe,6BAAqB,CAAA;AACpC,MAAM,CAAC,OAAO,GAAG,6BAAqB,CAAA","sourcesContent":["import * as crypto from 'crypto'\nimport { URL } from 'url'\nimport createLogger from 'ilp-logger'\n\nconst log = createLogger('ilp-plugin')\n\nexport interface Plugin {\n  connect(params?: Record<string, unknown>): Promise<void>\n  disconnect(params?: Record<string, unknown>): Promise<void>\n  isConnected(): boolean\n  sendData(data: Buffer): Promise<Buffer>\n  sendMoney(amount: string): Promise<void>\n  registerDataHandler: (handler: (data: Buffer) => Promise<Buffer>) => void\n  deregisterDataHandler: () => void\n  registerMoneyHandler: (handler: (amount: string) => Promise<void>) => void\n  deregisterMoneyHandler: () => void\n}\n\nexport interface CredentialOptions {\n  name?: string\n}\n\nconst generateCredentials = (opts?: CredentialOptions) => {\n  if (process.env.ILP_CREDENTIALS) {\n    return JSON.parse(process.env.ILP_CREDENTIALS)\n  }\n\n  const secret = crypto.randomBytes(16).toString('hex')\n  const name = (opts && opts.name) || ''\n\n  if (process.env.ILP_BTP_SERVER) {\n    const url = new URL(process.env.ILP_BTP_SERVER)\n    url.username = name\n    url.password = secret\n    return { server: url.href }\n  }\n\n  return { server: `btp+ws://${name}:${secret}@localhost:7768` }\n}\n\nexport const pluginFromEnvironment = function (opts?: CredentialOptions): Plugin {\n  const module = process.env.ILP_PLUGIN || 'ilp-plugin-btp'\n  const credentials = generateCredentials(opts)\n\n  log.debug('creating plugin with module', module)\n  log.debug('creating plugin with credentials', credentials)\n\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const Plugin = require(module)\n  return new Plugin(credentials)\n} as ModuleExport\n\nexport interface ModuleExport {\n  (opts?: CredentialOptions): Plugin\n  default: ModuleExport\n  pluginFromEnvironment: (opts?: CredentialOptions) => Plugin\n}\n\npluginFromEnvironment.pluginFromEnvironment = pluginFromEnvironment\npluginFromEnvironment.default = pluginFromEnvironment\nexport default pluginFromEnvironment\nmodule.exports = pluginFromEnvironment\n"]}