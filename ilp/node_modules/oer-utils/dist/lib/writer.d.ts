/// <reference types="node" />
import Long from 'long';
declare type LongValue = Long | number | string;
declare class Writer implements WriterInterface {
    static MAX_SAFE_INTEGER: number;
    static MIN_SAFE_INTEGER: number;
    static MIN_BUFFER_SIZE: number;
    static UINT_RANGES: {
        1: number;
        2: number;
        3: number;
        4: number;
        5: number;
        6: number;
    };
    static INT_RANGES: {
        1: number[];
        2: number[];
        3: number[];
        4: number[];
        5: number[];
        6: number[];
    };
    private buffer;
    private _offset;
    private strict;
    constructor(value?: number | Buffer);
    get length(): number;
    writeUInt(_value: LongValue, length: number): void;
    writeInt(_value: LongValue, length: number): void;
    writeVarUInt(_value: LongValue | Buffer): void;
    writeVarInt(_value: LongValue | Buffer): void;
    writeOctetString(buffer: Buffer, length: number): void;
    writeVarOctetString(buffer: Buffer): void;
    createVarOctetString(length: number): Writer;
    private _writeLengthPrefix;
    write(buffer: Buffer): void;
    getBuffer(): Buffer;
    private advance;
}
interface Writer {
    writeUInt8(value: LongValue): void;
    writeUInt16(value: LongValue): void;
    writeUInt32(value: LongValue): void;
    writeUInt64(value: LongValue): void;
    writeInt8(value: LongValue): void;
    writeInt16(value: LongValue): void;
    writeInt32(value: LongValue): void;
    writeInt64(value: LongValue): void;
}
export interface WriterInterface {
    readonly length: number;
    writeUInt(_value: LongValue, length: number): void;
    writeInt(_value: LongValue, length: number): void;
    writeVarUInt(_value: LongValue | Buffer): void;
    writeVarInt(_value: LongValue | Buffer): void;
    writeOctetString(buffer: Buffer, length: number): void;
    writeVarOctetString(buffer: Buffer): void;
    createVarOctetString(length: number): WriterInterface;
    write(buffer: Buffer): void;
    writeUInt8(value: LongValue): void;
    writeUInt16(value: LongValue): void;
    writeUInt32(value: LongValue): void;
    writeUInt64(value: LongValue): void;
    writeInt8(value: LongValue): void;
    writeInt16(value: LongValue): void;
    writeInt32(value: LongValue): void;
    writeInt64(value: LongValue): void;
}
export default Writer;
