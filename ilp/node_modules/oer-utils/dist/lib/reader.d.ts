/// <reference types="node" />
import Long from 'long';
declare class Reader {
    static HIGH_BIT: number;
    static LOWER_SEVEN_BITS: number;
    buffer: Buffer;
    cursor: number;
    bookmarks: number[];
    constructor(buffer: Buffer);
    static from(source: Buffer | Reader): Reader;
    bookmark(): void;
    restore(): void;
    ensureAvailable(bytes: number): void;
    readUIntNumber(length: number): number;
    readUIntLong(length: number): Long;
    readUInt(length: number): string;
    peekUIntNumber(length: number): number;
    peekUIntLong(length: number): Long;
    peekUInt(length: number): string;
    skipUInt(length: number): void;
    readIntNumber(length: number): number;
    readIntLong(length: number): Long;
    readInt(length: number): string;
    peekIntNumber(length: number): number;
    peekIntLong(length: number): Long;
    peekInt(length: number): string;
    skipInt(length: number): void;
    readVarUIntNumber(): number;
    readVarUIntLong(): Long;
    readVarUInt(): string;
    peekVarUIntNumber(): number;
    peekVarUIntLong(): Long;
    peekVarUInt(): string;
    skipVarUInt(): void;
    readVarIntNumber(): number;
    readVarIntLong(): Long;
    readVarInt(): string;
    peekVarIntNumber(): number;
    peekVarIntLong(): Long;
    peekVarInt(): string;
    skipVarInt(): void;
    readOctetString(length: number): Buffer;
    peekOctetString(length: number): Buffer;
    skipOctetString(length: number): void;
    readLengthPrefix(): number;
    readVarOctetString(): Buffer;
    peekVarOctetString(): Buffer;
    skipVarOctetString(): void;
    read(bytes: number): Buffer;
    peek(bytes: number): Buffer;
    skip(bytes: number): void;
}
interface Reader {
    readUInt8(): string;
    readUInt16(): string;
    readUInt32(): string;
    readUInt64(): string;
    peekUInt8(): string;
    peekUInt16(): string;
    peekUInt32(): string;
    peekUInt64(): string;
    skipUInt8(): void;
    skipUInt16(): void;
    skipUInt32(): void;
    skipUInt64(): void;
    readInt8(): string;
    readInt16(): string;
    readInt32(): string;
    readInt64(): string;
    peekInt8(): string;
    peekInt16(): string;
    peekInt32(): string;
    peekInt64(): string;
    skipInt8(): void;
    skipInt16(): void;
    skipInt32(): void;
    skipInt64(): void;
    readUInt8Number(): number;
    readUInt16Number(): number;
    readUInt32Number(): number;
    readUInt64Number(): number;
    peekUInt8Number(): number;
    peekUInt16Number(): number;
    peekUInt32Number(): number;
    peekUInt64Number(): number;
    readInt8Number(): number;
    readInt16Number(): number;
    readInt32Number(): number;
    readInt64Number(): number;
    peekInt8Number(): number;
    peekInt16Number(): number;
    peekInt32Number(): number;
    peekInt64Number(): number;
    readUInt8Long(): Long;
    readUInt16Long(): Long;
    readUInt32Long(): Long;
    readUInt64Long(): Long;
    peekUInt8Long(): Long;
    peekUInt16Long(): Long;
    peekUInt32Long(): Long;
    peekUInt64Long(): Long;
    readInt8Long(): Long;
    readInt16Long(): Long;
    readInt32Long(): Long;
    readInt64Long(): Long;
    peekInt8Long(): Long;
    peekInt16Long(): Long;
    peekInt32Long(): Long;
    peekInt64Long(): Long;
}
export default Reader;
