{"version":3,"file":"reader.js","sourceRoot":"","sources":["../../src/lib/reader.ts"],"names":[],"mappings":"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","sourcesContent":["import { UnderflowError } from '../errors/underflow-error'\nimport { ParseError } from '../errors/parse-error'\nimport Long from 'long'\nimport { bufferToLong, isSafeLength } from './util'\n\nclass Reader {\n  // Most significant bit in a byte\n  static HIGH_BIT = 0x80\n\n  // Other bits in a byte\n  static LOWER_SEVEN_BITS = 0x7f\n\n  buffer: Buffer\n  cursor: number\n  bookmarks: number[]\n\n  constructor(buffer: Buffer) {\n    this.buffer = buffer\n    this.cursor = 0\n    this.bookmarks = []\n  }\n\n  /**\n   * Create a Reader from a source of bytes.\n   *\n   * Currently, this method only allows the creation of a Reader from a Buffer.\n   *\n   * If the object provided is already a Reader, that reader is returned as is.\n   *\n   * @param source Source of binary data.\n   * @return Instance of Reader\n   */\n  static from(source: Buffer | Reader): Reader {\n    if (Buffer.isBuffer(source)) {\n      return new Reader(source)\n    } else if (source instanceof Reader) {\n      return new Reader(source.buffer.slice(source.cursor))\n    } else {\n      throw new Error('Reader must be given a Buffer')\n    }\n  }\n\n  /**\n   * Store the current cursor position on a stack.\n   */\n  bookmark(): void {\n    this.bookmarks.push(this.cursor)\n  }\n\n  /**\n   * Pop the most recently bookmarked cursor position off the stack.\n   */\n  restore(): void {\n    const maybeCursor = this.bookmarks.pop()\n    if (typeof maybeCursor === 'undefined') {\n      throw new Error('Cannot restore bookmark when no bookmark set')\n    }\n    this.cursor = maybeCursor\n  }\n\n  /**\n   * Ensure this number of bytes is buffered.\n   *\n   * This method checks that the given number of bytes is buffered and available\n   * for reading. If insufficient bytes are available, the method throws an\n   * `UnderflowError`.\n   *\n   * @param bytes Number of bytes that should be available.\n   */\n  ensureAvailable(bytes: number): void {\n    if (this.buffer.length < this.cursor + bytes) {\n      throw new UnderflowError(\n        'Tried to read ' +\n          bytes +\n          ' bytes, but only ' +\n          (this.buffer.length - this.cursor) +\n          ' bytes available'\n      )\n    }\n  }\n\n  /**\n   * Read a fixed-length unsigned big-endian integer as a JS number.\n   *\n   * @param length Length of the integer in bytes.\n   */\n  readUIntNumber(length: number): number {\n    if (!isSafeLength(length)) {\n      throw new Error(\n        'Length must be a be a positive integer in the range [1,6] to ensure that the parsed integer can be represented as a JavaScript number without sacrificing precision'\n      )\n    }\n\n    const value = this.buffer.readUIntBE(this.cursor, length)\n    this.cursor += length\n    return value\n  }\n\n  /**\n   * Read a fixed-length unsigned big-endian integer as a Long.\n   *\n   * @param length Length of the integer in bytes.\n   */\n  readUIntLong(length: number): Long {\n    const value = this.peekUIntLong(length)\n    this.cursor += length\n    return value\n  }\n\n  /**\n   * Read a fixed-length unsigned big-endian integer as a string.\n   *\n   * @param length Length of the integer in bytes.\n   */\n  readUInt(length: number): string {\n    if (isSafeLength(length)) {\n      return String(this.readUIntNumber(length))\n    } else {\n      return this.readUIntLong(length).toString()\n    }\n  }\n\n  peekUIntNumber(length: number): number {\n    if (!isSafeLength(length)) {\n      throw new Error(\n        'Length must be a be a positive integer in the range [1,6] to ensure that the parsed integer can be represented as a JavaScript number without sacrificing precision'\n      )\n    }\n\n    return this.buffer.readUIntBE(this.cursor, length)\n  }\n\n  /**\n   * Look at a fixed-length unsigned integer as a Long, but don't advance the cursor.\n   *\n   * @param length Length of the integer in bytes.\n   */\n  peekUIntLong(length: number): Long {\n    if (length === 0) {\n      return Long.UZERO\n    } else if (length < 0) {\n      throw new Error('Tried to read integer with negative length (provided: ' + length + ')')\n    } else if (length > 8) {\n      throw new Error('UInts longer than 8 bytes must be encoded as VarUInts')\n    }\n\n    return bufferToLong(this.peek(length), true)\n  }\n\n  /**\n   * Look at a fixed-length unsigned integer as a string, but don't advance the cursor.\n   *\n   * @param length Length of the integer in bytes.\n   */\n  peekUInt(length: number): string {\n    if (isSafeLength(length)) {\n      return String(this.peekUIntNumber(length))\n    } else {\n      return this.peekUIntLong(length).toString()\n    }\n  }\n\n  /**\n   * Advance cursor by length bytes.\n   */\n  skipUInt(length: number): void {\n    this.skip(length)\n  }\n\n  /**\n   * Read a fixed-length signed big-endian integer as a JS number.\n   *\n   * @param length Length of the integer in bytes.\n   */\n  readIntNumber(length: number): number {\n    if (!isSafeLength(length)) {\n      throw new Error(\n        'Length must be a be a positive integer in the range [1,6] to ensure that the parsed integer can be represented as a JavaScript number without sacrificing precision'\n      )\n    }\n\n    const value = this.buffer.readIntBE(this.cursor, length)\n    this.cursor += length\n    return value\n  }\n\n  /**\n   * Read a fixed-length signed big-endian integer.\n   *\n   * @param length Length of the integer in bytes.\n   */\n  readIntLong(length: number): Long {\n    const value = this.peekIntLong(length)\n    this.cursor += length\n    return value\n  }\n\n  /**\n   * Read a fixed-length signed big-endian integer as a string.\n   *\n   * @param length Length of the integer in bytes.\n   */\n  readInt(length: number): string {\n    if (isSafeLength(length)) {\n      return String(this.readIntNumber(length))\n    } else {\n      return this.readIntLong(length).toString()\n    }\n  }\n\n  /**\n   * Read a fixed-length signed big-endian integer as a JS number.\n   *\n   * @param length Length of the integer in bytes.\n   */\n  peekIntNumber(length: number): number {\n    if (!isSafeLength(length)) {\n      throw new Error(\n        'Length must be a be a positive integer in the range [1,6] to ensure that the parsed integer can be represented as a JavaScript number without sacrificing precision'\n      )\n    }\n\n    return this.buffer.readIntBE(this.cursor, length)\n  }\n\n  /**\n   * Look at a fixed-length signed integer, but don't advance the cursor.\n   *\n   * @param length Length of the integer in bytes.\n   */\n  peekIntLong(length: number): Long {\n    if (length === 0) {\n      return Long.ZERO\n    } else if (length < 0) {\n      throw new Error('Tried to read integer with negative length (provided: ' + length + ')')\n    } else if (length > 8) {\n      throw new Error('Ints longer than 8 bytes must be encoded as VarInts')\n    }\n\n    return bufferToLong(this.peek(length), false)\n  }\n\n  /**\n   * Look at a fixed-length signed integer as a string, but don't advance the cursor.\n   *\n   * @param length Length of the integer in bytes.\n   */\n  peekInt(length: number): string {\n    if (isSafeLength(length)) {\n      return String(this.peekIntNumber(length))\n    } else {\n      return this.peekIntLong(length).toString()\n    }\n  }\n\n  /**\n   * Advance cursor by length bytes.\n   */\n  skipInt(length: number): void {\n    this.skip(length)\n  }\n\n  /**\n   * Read a variable-length unsigned integer at the cursor position and advance the cursor.\n   */\n  readVarUIntNumber(): number {\n    // Interledger uses canonical OER (C-OER), so we know that any value that\n    // fits six bytes MUST be encoded with a one-byte length determinant\n    if (!isSafeLength(this.buffer[this.cursor])) {\n      throw new Error(\n        'Length must be a be a positive integer in the range [1,6] to ensure that the parsed integer can be represented as a JavaScript number without sacrificing precision'\n      )\n    }\n\n    return this.readUIntNumber(this.buffer[this.cursor++])\n  }\n\n  /**\n   * Read a variable-length unsigned integer at the cursor position and advance the cursor.\n   */\n  readVarUIntLong(): Long {\n    const buffer = this.readVarOctetString()\n    if (buffer.length === 0) {\n      throw new ParseError('UInt of length 0 is invalid')\n    }\n\n    return bufferToLong(buffer, true)\n  }\n\n  /**\n   * Read a variable-length unsigned integer at the cursor position as a string and advance the cursor.\n   */\n  readVarUInt(): string {\n    return this.readVarUIntLong().toString()\n  }\n\n  /**\n   * Read the next variable-length unsigned integer as a JS number, but don't advance the cursor.\n   */\n  peekVarUIntNumber(): number {\n    this.bookmark()\n    const value = this.readVarUIntNumber()\n    this.restore()\n\n    return value\n  }\n\n  /**\n   * Read the next variable-length unsigned integer as a Long, but don't advance the cursor.\n   */\n  peekVarUIntLong(): Long {\n    this.bookmark()\n    const value = this.readVarUIntLong()\n    this.restore()\n\n    return value\n  }\n\n  /**\n   * Read the next variable-length unsigned integer, but don't advance the cursor.\n   */\n  peekVarUInt(): string {\n    return this.peekVarUIntLong().toString()\n  }\n\n  /**\n   * Skip past the variable-length unsigned integer at the cursor position.\n   *\n   * Since variable integers are encoded the same way as octet strings, this\n   * method is equivalent to skipVarOctetString.\n   */\n  skipVarUInt(): void {\n    this.skipVarOctetString()\n  }\n\n  /**\n   * Read a variable-length unsigned integer at the cursor position and advance the cursor.\n   */\n  readVarIntNumber(): number {\n    // Interledger uses canonical OER (C-OER), so we know that any value that\n    // fits six bytes MUST be encoded with a one-byte length determinant\n    if (!isSafeLength(this.buffer[this.cursor])) {\n      throw new Error(\n        'Length must be a be a positive integer in the range [1,6] to ensure that the parsed integer can be represented as a JavaScript number without sacrificing precision'\n      )\n    }\n\n    return this.readIntNumber(this.buffer[this.cursor++])\n  }\n\n  /**\n   * Read a variable-length unsigned integer at the cursor position and advance the cursor.\n   */\n  readVarIntLong(): Long {\n    const buffer = this.readVarOctetString()\n\n    if (buffer.length === 0) {\n      throw new ParseError('Int of length 0 is invalid')\n    }\n\n    return bufferToLong(buffer, false)\n  }\n\n  /**\n   * Read a variable-length unsigned integer at the cursor position as a string and advance the cursor.\n   */\n  readVarInt(): string {\n    return this.readVarIntLong().toString()\n  }\n\n  /**\n   * Read the next variable-length unsigned integer, but don't advance the cursor.\n   */\n  peekVarIntNumber(): number {\n    this.bookmark()\n    const value = this.readVarIntNumber()\n    this.restore()\n\n    return value\n  }\n\n  /**\n   * Read the next variable-length unsigned integer, but don't advance the cursor.\n   */\n  peekVarIntLong(): Long {\n    this.bookmark()\n    const value = this.readVarIntLong()\n    this.restore()\n\n    return value\n  }\n\n  /**\n   * Read the next variable-length unsigned integer as a string, but don't advance the cursor.\n   */\n  peekVarInt(): string {\n    return this.peekVarIntLong().toString()\n  }\n\n  /**\n   * Skip past the variable-length signed integer at the cursor position.\n   *\n   * Since variable integers are encoded the same way as octet strings, this\n   * method is equivalent to skipVarOctetString.\n   */\n  skipVarInt(): void {\n    this.skipVarOctetString()\n  }\n\n  /**\n   * Read a fixed-length octet string.\n   *\n   * @param length Length of the octet string.\n   */\n  readOctetString(length: number): Buffer {\n    return this.read(length)\n  }\n\n  /**\n   * Peek at a fixed length octet string.\n   *\n   * @param length Length of the octet string.\n   */\n  peekOctetString(length: number): Buffer {\n    return this.peek(length)\n  }\n\n  /**\n   * Skip a fixed length octet string.\n   *\n   * @param length Length of the octet string.\n   */\n  skipOctetString(length: number): void {\n    return this.skip(length)\n  }\n\n  /**\n   * Read a length prefix.\n   *\n   * You shouldn't need this. Length prefixes are used internally by\n   * variable-length octet strings and integers.\n   */\n  readLengthPrefix(): number {\n    const length = this.readUInt8Number()\n\n    if (length & Reader.HIGH_BIT) {\n      const lengthPrefixLength = length & Reader.LOWER_SEVEN_BITS\n      const actualLength = lengthPrefixLength && this.readUIntNumber(lengthPrefixLength)\n\n      // Reject lengths that could have been encoded with a shorter prefix\n      const minLength = Math.max(128, 1 << ((lengthPrefixLength - 1) * 8))\n      if (lengthPrefixLength === 0 || actualLength < minLength) {\n        throw new ParseError(\n          'Length prefix encoding is not canonical: ' +\n            actualLength +\n            ' encoded in ' +\n            lengthPrefixLength +\n            ' bytes'\n        )\n      }\n\n      return actualLength\n    }\n\n    return length\n  }\n\n  /**\n   * Read a variable-length octet string.\n   *\n   * A variable-length octet string is a length-prefixed set of arbitrary bytes.\n   */\n  readVarOctetString(): Buffer {\n    const length = this.readLengthPrefix()\n\n    return this.read(length)\n  }\n\n  /**\n   * Read a variable-length buffer, but do not advance cursor position.\n   */\n  peekVarOctetString(): Buffer {\n    this.bookmark()\n    const value = this.readVarOctetString()\n    this.restore()\n\n    return value\n  }\n\n  /**\n   * Skip a variable-length buffer.\n   */\n  skipVarOctetString(): void {\n    const length = this.readLengthPrefix()\n\n    this.skip(length)\n  }\n\n  /**\n   * Read a given number of bytes.\n   *\n   * Returns this many bytes starting at the cursor position and advances the\n   * cursor.\n   *\n   * @param bytes Number of bytes to read.\n   */\n  read(bytes: number): Buffer {\n    this.ensureAvailable(bytes)\n\n    const value = this.buffer.slice(this.cursor, this.cursor + bytes)\n    this.cursor += bytes\n\n    return value\n  }\n\n  /**\n   * Read bytes, but do not advance cursor.\n   *\n   * @param bytes Number of bytes to read.\n   */\n  peek(bytes: number): Buffer {\n    this.ensureAvailable(bytes)\n\n    return this.buffer.slice(this.cursor, this.cursor + bytes)\n  }\n\n  /**\n   * Skip a number of bytes.\n   *\n   * Advances the cursor by this many bytes.\n   *\n   * @param bytes Number of bytes to advance the cursor by.\n   */\n  skip(bytes: number): void {\n    this.ensureAvailable(bytes)\n\n    this.cursor += bytes\n  }\n}\n\ninterface Reader {\n  readUInt8(): string\n  readUInt16(): string\n  readUInt32(): string\n  readUInt64(): string\n  peekUInt8(): string\n  peekUInt16(): string\n  peekUInt32(): string\n  peekUInt64(): string\n  skipUInt8(): void\n  skipUInt16(): void\n  skipUInt32(): void\n  skipUInt64(): void\n  readInt8(): string\n  readInt16(): string\n  readInt32(): string\n  readInt64(): string\n  peekInt8(): string\n  peekInt16(): string\n  peekInt32(): string\n  peekInt64(): string\n  skipInt8(): void\n  skipInt16(): void\n  skipInt32(): void\n  skipInt64(): void\n  readUInt8Number(): number\n  readUInt16Number(): number\n  readUInt32Number(): number\n  readUInt64Number(): number\n  peekUInt8Number(): number\n  peekUInt16Number(): number\n  peekUInt32Number(): number\n  peekUInt64Number(): number\n  readInt8Number(): number\n  readInt16Number(): number\n  readInt32Number(): number\n  readInt64Number(): number\n  peekInt8Number(): number\n  peekInt16Number(): number\n  peekInt32Number(): number\n  peekInt64Number(): number\n  readUInt8Long(): Long\n  readUInt16Long(): Long\n  readUInt32Long(): Long\n  readUInt64Long(): Long\n  peekUInt8Long(): Long\n  peekUInt16Long(): Long\n  peekUInt32Long(): Long\n  peekUInt64Long(): Long\n  readInt8Long(): Long\n  readInt16Long(): Long\n  readInt32Long(): Long\n  readInt64Long(): Long\n  peekInt8Long(): Long\n  peekInt16Long(): Long\n  peekInt32Long(): Long\n  peekInt64Long(): Long\n}\n\n// Create {read,peek,skip}UInt{8,16,32}{,Number,Long} shortcuts\n;([8, 16, 32, 64] as const).forEach((bits) => {\n  ;(['read', 'peek'] as const).forEach((verb) => {\n    Reader.prototype[`${verb}UInt${bits}`] = function () {\n      return this[`${verb}UInt`](bits / 8)\n    }\n\n    Reader.prototype[`${verb}Int${bits}`] = function () {\n      return this[`${verb}Int`](bits / 8)\n    }\n\n    Reader.prototype[`${verb}UInt${bits}Number`] = function () {\n      return this[`${verb}UIntNumber`](bits / 8)\n    }\n\n    Reader.prototype[`${verb}Int${bits}Number`] = function () {\n      return this[`${verb}IntNumber`](bits / 8)\n    }\n\n    Reader.prototype[`${verb}UInt${bits}Long`] = function () {\n      return this[`${verb}UIntLong`](bits / 8)\n    }\n\n    Reader.prototype[`${verb}Int${bits}Long`] = function () {\n      return this[`${verb}IntLong`](bits / 8)\n    }\n  })\n\n  // Skips have a different return type, so we do them separately\n  Reader.prototype[`skipUInt${bits}`] = function () {\n    return this[`skipUInt`](bits / 8)\n  }\n\n  Reader.prototype[`skipInt${bits}`] = function () {\n    return this[`skipInt`](bits / 8)\n  }\n})\n\nexport default Reader\n"]}