/// <reference types="node" />
import Long from 'long';
import { WriterInterface } from './writer';
declare type LongValue = Long | number | string;
declare class Predictor implements WriterInterface {
    private size;
    constructor();
    get length(): number;
    writeUInt(value: LongValue, length: number): void;
    writeInt(value: LongValue, length: number): void;
    writeVarUInt(_value: LongValue): void;
    writeVarInt(_value: LongValue): void;
    writeOctetString(buffer: Buffer, length: number): void;
    writeVarOctetString(buffer: Buffer): void;
    createVarOctetString(length: number): WriterInterface;
    write(bytes: Buffer): void;
    skip(bytes: number): void;
    getSize(): number;
    static measureVarOctetString(length: number): number;
    private skipVarOctetString;
}
interface Predictor {
    writeUInt8(value: number): void;
    writeUInt16(value: number): void;
    writeUInt32(value: number): void;
    writeUInt64(value: number): void;
    writeInt8(value: number): void;
    writeInt16(value: number): void;
    writeInt32(value: number): void;
    writeInt64(value: number): void;
}
export default Predictor;
