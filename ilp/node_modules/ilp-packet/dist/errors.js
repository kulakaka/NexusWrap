"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelativeApplicationError = exports.InsufficientTimeoutError = exports.InsufficientSourceAmountError = exports.TransferTimedOutError = exports.TemporaryApplicationError = exports.RateLimitedError = exports.InsufficientLiquidityError = exports.ConnectorBusyError = exports.PeerBusyError = exports.PeerUnreachableError = exports.InternalError = exports.FinalApplicationError = exports.AmountTooLargeError = exports.CannotReceiveError = exports.UnexpectedPaymentError = exports.WrongConditionError = exports.InsufficientDestinationAmountError = exports.InvalidAmountError = exports.UnreachableError = exports.InvalidPacketError = exports.BadRequestError = exports.BaseIlpError = exports.codes = exports.IlpErrorCode = void 0;
const oer_utils_1 = require("oer-utils");
var IlpErrorCode;
(function (IlpErrorCode) {
    IlpErrorCode["F00_BAD_REQUEST"] = "F00";
    IlpErrorCode["F01_INVALID_PACKET"] = "F01";
    IlpErrorCode["F02_UNREACHABLE"] = "F02";
    IlpErrorCode["F03_INVALID_AMOUNT"] = "F03";
    IlpErrorCode["F04_INSUFFICIENT_DESTINATION_AMOUNT"] = "F04";
    IlpErrorCode["F05_WRONG_CONDITION"] = "F05";
    IlpErrorCode["F06_UNEXPECTED_PAYMENT"] = "F06";
    IlpErrorCode["F07_CANNOT_RECEIVE"] = "F07";
    IlpErrorCode["F08_AMOUNT_TOO_LARGE"] = "F08";
    IlpErrorCode["F99_APPLICATION_ERROR"] = "F99";
    IlpErrorCode["T00_INTERNAL_ERROR"] = "T00";
    IlpErrorCode["T01_PEER_UNREACHABLE"] = "T01";
    IlpErrorCode["T02_PEER_BUSY"] = "T02";
    IlpErrorCode["T03_CONNECTOR_BUSY"] = "T03";
    IlpErrorCode["T04_INSUFFICIENT_LIQUIDITY"] = "T04";
    IlpErrorCode["T05_RATE_LIMITED"] = "T05";
    IlpErrorCode["T99_APPLICATION_ERROR"] = "T99";
    IlpErrorCode["R00_TRANSFER_TIMED_OUT"] = "R00";
    IlpErrorCode["R01_INSUFFICIENT_SOURCE_AMOUNT"] = "R01";
    IlpErrorCode["R02_INSUFFICIENT_TIMEOUT"] = "R02";
    IlpErrorCode["R99_APPLICATION_ERROR"] = "R99";
})(IlpErrorCode = exports.IlpErrorCode || (exports.IlpErrorCode = {}));
exports.codes = IlpErrorCode;
class BaseIlpError extends Error {
}
exports.BaseIlpError = BaseIlpError;
class BadRequestError extends BaseIlpError {
    constructor() {
        super(...arguments);
        this.ilpErrorCode = IlpErrorCode.F00_BAD_REQUEST;
    }
}
exports.BadRequestError = BadRequestError;
class InvalidPacketError extends BaseIlpError {
    constructor() {
        super(...arguments);
        this.ilpErrorCode = IlpErrorCode.F01_INVALID_PACKET;
    }
}
exports.InvalidPacketError = InvalidPacketError;
class UnreachableError extends BaseIlpError {
    constructor() {
        super(...arguments);
        this.ilpErrorCode = IlpErrorCode.F02_UNREACHABLE;
    }
}
exports.UnreachableError = UnreachableError;
class InvalidAmountError extends BaseIlpError {
    constructor() {
        super(...arguments);
        this.ilpErrorCode = IlpErrorCode.F03_INVALID_AMOUNT;
    }
}
exports.InvalidAmountError = InvalidAmountError;
class InsufficientDestinationAmountError extends BaseIlpError {
    constructor() {
        super(...arguments);
        this.ilpErrorCode = IlpErrorCode.F04_INSUFFICIENT_DESTINATION_AMOUNT;
    }
}
exports.InsufficientDestinationAmountError = InsufficientDestinationAmountError;
class WrongConditionError extends BaseIlpError {
    constructor() {
        super(...arguments);
        this.ilpErrorCode = IlpErrorCode.F05_WRONG_CONDITION;
    }
}
exports.WrongConditionError = WrongConditionError;
class UnexpectedPaymentError extends BaseIlpError {
    constructor() {
        super(...arguments);
        this.ilpErrorCode = IlpErrorCode.F06_UNEXPECTED_PAYMENT;
    }
}
exports.UnexpectedPaymentError = UnexpectedPaymentError;
class CannotReceiveError extends BaseIlpError {
    constructor() {
        super(...arguments);
        this.ilpErrorCode = IlpErrorCode.F07_CANNOT_RECEIVE;
    }
}
exports.CannotReceiveError = CannotReceiveError;
class AmountTooLargeError extends BaseIlpError {
    constructor(message, opts) {
        super(message);
        this.ilpErrorCode = IlpErrorCode.F08_AMOUNT_TOO_LARGE;
        const writer = new oer_utils_1.Writer(8 + 8);
        writer.writeUInt64(opts.receivedAmount);
        writer.writeUInt64(opts.maximumAmount);
        this.ilpErrorData = writer.getBuffer();
    }
}
exports.AmountTooLargeError = AmountTooLargeError;
class FinalApplicationError extends BaseIlpError {
    constructor(message, data) {
        super(message);
        this.ilpErrorCode = IlpErrorCode.F99_APPLICATION_ERROR;
        this.ilpErrorData = data;
    }
}
exports.FinalApplicationError = FinalApplicationError;
class InternalError extends BaseIlpError {
    constructor() {
        super(...arguments);
        this.ilpErrorCode = IlpErrorCode.T00_INTERNAL_ERROR;
    }
}
exports.InternalError = InternalError;
class PeerUnreachableError extends BaseIlpError {
    constructor() {
        super(...arguments);
        this.ilpErrorCode = IlpErrorCode.T01_PEER_UNREACHABLE;
    }
}
exports.PeerUnreachableError = PeerUnreachableError;
class PeerBusyError extends BaseIlpError {
    constructor() {
        super(...arguments);
        this.ilpErrorCode = IlpErrorCode.T02_PEER_BUSY;
    }
}
exports.PeerBusyError = PeerBusyError;
class ConnectorBusyError extends BaseIlpError {
    constructor() {
        super(...arguments);
        this.ilpErrorCode = IlpErrorCode.T03_CONNECTOR_BUSY;
    }
}
exports.ConnectorBusyError = ConnectorBusyError;
class InsufficientLiquidityError extends BaseIlpError {
    constructor() {
        super(...arguments);
        this.ilpErrorCode = IlpErrorCode.T04_INSUFFICIENT_LIQUIDITY;
    }
}
exports.InsufficientLiquidityError = InsufficientLiquidityError;
class RateLimitedError extends BaseIlpError {
    constructor() {
        super(...arguments);
        this.ilpErrorCode = IlpErrorCode.T05_RATE_LIMITED;
    }
}
exports.RateLimitedError = RateLimitedError;
class TemporaryApplicationError extends BaseIlpError {
    constructor(message, data) {
        super(message);
        this.ilpErrorCode = IlpErrorCode.T99_APPLICATION_ERROR;
        this.ilpErrorData = data;
    }
}
exports.TemporaryApplicationError = TemporaryApplicationError;
class TransferTimedOutError extends BaseIlpError {
    constructor() {
        super(...arguments);
        this.ilpErrorCode = IlpErrorCode.R00_TRANSFER_TIMED_OUT;
    }
}
exports.TransferTimedOutError = TransferTimedOutError;
class InsufficientSourceAmountError extends BaseIlpError {
    constructor() {
        super(...arguments);
        this.ilpErrorCode = IlpErrorCode.R01_INSUFFICIENT_SOURCE_AMOUNT;
    }
}
exports.InsufficientSourceAmountError = InsufficientSourceAmountError;
class InsufficientTimeoutError extends BaseIlpError {
    constructor() {
        super(...arguments);
        this.ilpErrorCode = IlpErrorCode.R02_INSUFFICIENT_TIMEOUT;
    }
}
exports.InsufficientTimeoutError = InsufficientTimeoutError;
class RelativeApplicationError extends BaseIlpError {
    constructor(message, data) {
        super(message);
        this.ilpErrorCode = IlpErrorCode.R99_APPLICATION_ERROR;
        this.ilpErrorData = data;
    }
}
exports.RelativeApplicationError = RelativeApplicationError;
//# sourceMappingURL=errors.js.map