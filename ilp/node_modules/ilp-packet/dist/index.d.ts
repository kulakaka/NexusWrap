/// <reference types="node" />
import { IlpAddress, isValidIlpAddress } from './utils/address';
import * as errors from './errors';
export declare const Errors: typeof errors;
export { IlpAddress, isValidIlpAddress };
export { getScheme, IlpAddressScheme } from './utils/address';
export { IlpErrorCode, IlpErrorCode as IlpError, BaseIlpError as IlpErrorClass } from './errors';
export declare const isCanonicalIlpRejectCode: (o: unknown) => o is errors.IlpErrorCode;
export declare enum Type {
    TYPE_ILP_PREPARE = 12,
    TYPE_ILP_FULFILL = 13,
    TYPE_ILP_REJECT = 14
}
export declare enum IlpPacketType {
    Prepare = 12,
    Fulfill = 13,
    Reject = 14
}
export declare const deserializeEnvelope: (binary: Buffer) => {
    type: number;
    contents: Buffer;
};
export declare type IlpPacket = {
    type: Type.TYPE_ILP_PREPARE;
    typeString?: 'ilp_prepare';
    data: IlpPrepare;
} | {
    type: Type.TYPE_ILP_FULFILL;
    typeString?: 'ilp_fulfill';
    data: IlpFulfill;
} | {
    type: Type.TYPE_ILP_REJECT;
    typeString?: 'ilp_reject';
    data: IlpReject;
};
export interface IlpPrepare {
    amount: string;
    executionCondition: Buffer;
    expiresAt: Date;
    destination: string;
    data: Buffer;
}
export declare const serializeIlpPrepare: (json: IlpPrepare) => Buffer;
export declare const deserializeIlpPrepare: (binary: Buffer) => IlpPrepare;
export interface IlpFulfill {
    fulfillment: Buffer;
    data: Buffer;
}
export declare const isIlpReply: (o: unknown) => o is IlpReply;
export declare const isPrepare: (o: unknown) => o is IlpPrepare;
export declare const isFulfill: (o: unknown) => o is IlpFulfill;
export declare const isReject: (o: unknown) => o is IlpReject;
export declare const isIlpError: (o: unknown) => o is errors.BaseIlpError;
export declare const serializeIlpFulfill: (json: IlpFulfill) => Buffer;
export declare const deserializeIlpFulfill: (binary: Buffer) => IlpFulfill;
export interface IlpReject {
    code: string;
    triggeredBy: string;
    message: string;
    data: Buffer;
}
export declare const serializeIlpReject: (json: IlpReject) => Buffer;
export declare const deserializeIlpReject: (binary: Buffer) => IlpReject;
export declare const serializeIlpPacket: (obj: IlpPacket) => Buffer;
export declare const deserializeIlpPacket: (binary: Buffer) => IlpPacket;
export declare type IlpPacketHander = (packet: IlpPrepare) => Promise<IlpReply>;
export declare type IlpAny = IlpPrepare | IlpFulfill | IlpReject;
export declare type IlpReply = IlpFulfill | IlpReject;
export declare const deserializeIlpReply: (data: Buffer) => IlpReply;
export declare const serializeIlpReply: (packet: IlpReply) => Buffer;
export declare const errorToReject: (address: string, error: errors.BaseIlpError) => Buffer;
export declare const errorToIlpReject: (address: string, error: errors.BaseIlpError) => IlpReject;
