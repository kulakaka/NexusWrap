"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generalizedTimeToDate = exports.GENERALIZED_TIME_REGEX = exports.dateToGeneralizedTime = exports.interledgerTimeToDate = exports.INTERLEDGER_TIME_LENGTH = exports.dateToInterledgerTime = void 0;
function pad(n) {
    return n < 10 ? '0' + n : String(n);
}
const dateToInterledgerTime = (date) => {
    return (date.getUTCFullYear() +
        pad(date.getUTCMonth() + 1) +
        pad(date.getUTCDate()) +
        pad(date.getUTCHours()) +
        pad(date.getUTCMinutes()) +
        pad(date.getUTCSeconds()) +
        (date.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5));
};
exports.dateToInterledgerTime = dateToInterledgerTime;
exports.INTERLEDGER_TIME_LENGTH = 17;
const interledgerTimeToDate = (interledgerTime) => {
    const date = new Date(Date.UTC(+interledgerTime.slice(0, 4), +interledgerTime.slice(4, 6) - 1, +interledgerTime.slice(6, 8), +interledgerTime.slice(8, 10), +interledgerTime.slice(10, 12), +interledgerTime.slice(12, 14), +interledgerTime.slice(14, 17)));
    if (!date.valueOf()) {
        throw new Error('invalid date');
    }
    return date;
};
exports.interledgerTimeToDate = interledgerTimeToDate;
const dateToGeneralizedTime = (date) => {
    return date.toISOString().replace(/[-T:]/g, '');
};
exports.dateToGeneralizedTime = dateToGeneralizedTime;
exports.GENERALIZED_TIME_REGEX = /^([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2}\.[0-9]{3}Z)$/;
const generalizedTimeToDate = (generalizedTime) => {
    const isoTimestamp = generalizedTime.replace(exports.GENERALIZED_TIME_REGEX, '$1-$2-$3T$4:$5:$6');
    const date = new Date(isoTimestamp);
    if (!date.valueOf()) {
        throw new Error('invalid date');
    }
    return date;
};
exports.generalizedTimeToDate = generalizedTimeToDate;
//# sourceMappingURL=date.js.map