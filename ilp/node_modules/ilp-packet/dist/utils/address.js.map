{"version":3,"file":"address.js","sourceRoot":"","sources":["../../src/utils/address.ts"],"names":[],"mappings":";;;AAAA,MAAM,iBAAiB,GAAG,uEAAuE,CAAA;AACjG,MAAM,sBAAsB,GAAG,IAAI,CAAA;AAe5B,MAAM,SAAS,GAAG,CAAC,OAAmB,EAAoB,EAAE,CACjE,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAqB,CAAA;AAD9B,QAAA,SAAS,aACqB;AAUpC,MAAM,iBAAiB,GAAG,CAAC,CAAU,EAAmB,EAAE,CAC/D,OAAO,CAAC,KAAK,QAAQ,IAAI,CAAC,CAAC,MAAM,IAAI,sBAAsB,IAAI,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;AAD7E,QAAA,iBAAiB,qBAC4D","sourcesContent":["const ILP_ADDRESS_REGEX = /^(g|private|example|peer|self|test[1-3]?|local)([.][a-zA-Z0-9_~-]+)+$/\nconst ILP_ADDRESS_MAX_LENGTH = 1023\n\nexport type IlpAddressScheme =\n  | 'g'\n  | 'private'\n  | 'example'\n  | 'test'\n  | 'test1'\n  | 'test2'\n  | 'test3'\n  | 'local'\n  | 'peer'\n  | 'self'\n\n/** Get prefix or allocation scheme of the given ILP address */\nexport const getScheme = (address: IlpAddress): IlpAddressScheme =>\n  address.split('.')[0] as IlpAddressScheme\n\ndeclare class Tag<N extends string> {\n  protected __nominal: N\n}\n\ntype Brand<T, N extends string> = T & Tag<N>\n\nexport type IlpAddress = Brand<string, 'IlpAddress'>\n\nexport const isValidIlpAddress = (o: unknown): o is IlpAddress =>\n  typeof o === 'string' && o.length <= ILP_ADDRESS_MAX_LENGTH && ILP_ADDRESS_REGEX.test(o)\n"]}