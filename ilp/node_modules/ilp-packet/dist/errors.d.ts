/// <reference types="node" />
export declare enum IlpErrorCode {
    F00_BAD_REQUEST = "F00",
    F01_INVALID_PACKET = "F01",
    F02_UNREACHABLE = "F02",
    F03_INVALID_AMOUNT = "F03",
    F04_INSUFFICIENT_DESTINATION_AMOUNT = "F04",
    F05_WRONG_CONDITION = "F05",
    F06_UNEXPECTED_PAYMENT = "F06",
    F07_CANNOT_RECEIVE = "F07",
    F08_AMOUNT_TOO_LARGE = "F08",
    F99_APPLICATION_ERROR = "F99",
    T00_INTERNAL_ERROR = "T00",
    T01_PEER_UNREACHABLE = "T01",
    T02_PEER_BUSY = "T02",
    T03_CONNECTOR_BUSY = "T03",
    T04_INSUFFICIENT_LIQUIDITY = "T04",
    T05_RATE_LIMITED = "T05",
    T99_APPLICATION_ERROR = "T99",
    R00_TRANSFER_TIMED_OUT = "R00",
    R01_INSUFFICIENT_SOURCE_AMOUNT = "R01",
    R02_INSUFFICIENT_TIMEOUT = "R02",
    R99_APPLICATION_ERROR = "R99"
}
export declare const codes: typeof IlpErrorCode;
export declare abstract class BaseIlpError extends Error {
    abstract ilpErrorCode: IlpErrorCode;
    ilpErrorMessage?: string;
    ilpErrorData?: Buffer;
}
export declare class BadRequestError extends BaseIlpError {
    ilpErrorCode: IlpErrorCode.F00_BAD_REQUEST;
}
export declare class InvalidPacketError extends BaseIlpError {
    ilpErrorCode: IlpErrorCode.F01_INVALID_PACKET;
}
export declare class UnreachableError extends BaseIlpError {
    ilpErrorCode: IlpErrorCode.F02_UNREACHABLE;
}
export declare class InvalidAmountError extends BaseIlpError {
    ilpErrorCode: IlpErrorCode.F03_INVALID_AMOUNT;
}
export declare class InsufficientDestinationAmountError extends BaseIlpError {
    ilpErrorCode: IlpErrorCode.F04_INSUFFICIENT_DESTINATION_AMOUNT;
}
export declare class WrongConditionError extends BaseIlpError {
    ilpErrorCode: IlpErrorCode.F05_WRONG_CONDITION;
}
export declare class UnexpectedPaymentError extends BaseIlpError {
    ilpErrorCode: IlpErrorCode.F06_UNEXPECTED_PAYMENT;
}
export declare class CannotReceiveError extends BaseIlpError {
    ilpErrorCode: IlpErrorCode.F07_CANNOT_RECEIVE;
}
export interface AmountTooLargeErrorOpts {
    receivedAmount: string;
    maximumAmount: string;
}
export declare class AmountTooLargeError extends BaseIlpError {
    ilpErrorCode: IlpErrorCode.F08_AMOUNT_TOO_LARGE;
    ilpErrorData: Buffer;
    constructor(message: string, opts: AmountTooLargeErrorOpts);
}
export declare class FinalApplicationError extends BaseIlpError {
    ilpErrorCode: IlpErrorCode.F99_APPLICATION_ERROR;
    ilpErrorData: Buffer;
    constructor(message: string, data: Buffer);
}
export declare class InternalError extends BaseIlpError {
    ilpErrorCode: IlpErrorCode.T00_INTERNAL_ERROR;
}
export declare class PeerUnreachableError extends BaseIlpError {
    ilpErrorCode: IlpErrorCode.T01_PEER_UNREACHABLE;
}
export declare class PeerBusyError extends BaseIlpError {
    ilpErrorCode: IlpErrorCode.T02_PEER_BUSY;
}
export declare class ConnectorBusyError extends BaseIlpError {
    ilpErrorCode: IlpErrorCode.T03_CONNECTOR_BUSY;
}
export declare class InsufficientLiquidityError extends BaseIlpError {
    ilpErrorCode: IlpErrorCode.T04_INSUFFICIENT_LIQUIDITY;
}
export declare class RateLimitedError extends BaseIlpError {
    ilpErrorCode: IlpErrorCode.T05_RATE_LIMITED;
}
export declare class TemporaryApplicationError extends BaseIlpError {
    ilpErrorCode: IlpErrorCode.T99_APPLICATION_ERROR;
    ilpErrorData: Buffer;
    constructor(message: string, data: Buffer);
}
export declare class TransferTimedOutError extends BaseIlpError {
    ilpErrorCode: IlpErrorCode.R00_TRANSFER_TIMED_OUT;
}
export declare class InsufficientSourceAmountError extends BaseIlpError {
    ilpErrorCode: IlpErrorCode.R01_INSUFFICIENT_SOURCE_AMOUNT;
}
export declare class InsufficientTimeoutError extends BaseIlpError {
    ilpErrorCode: IlpErrorCode.R02_INSUFFICIENT_TIMEOUT;
}
export declare class RelativeApplicationError extends BaseIlpError {
    ilpErrorCode: IlpErrorCode.R99_APPLICATION_ERROR;
    ilpErrorData: Buffer;
    constructor(message: string, data: Buffer);
}
