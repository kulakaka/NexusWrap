/// <reference types="node" />
import * as IlpPacket from 'ilp-packet';
export interface IldcpRequest {
    expiresAt?: Date;
    data?: Buffer;
}
export interface IldcpResponse {
    clientAddress: string;
    assetScale: number;
    assetCode: string;
}
declare const deserializeIldcpRequest: (request: Buffer) => IldcpRequest;
declare const serializeIldcpRequest: (request: IldcpRequest) => Buffer;
declare const deserializeIldcpResponse: (response: Buffer) => IldcpResponse & {
    clientAddress: IlpPacket.IlpAddress;
    assetScale: AssetScale;
};
declare const serializeIldcpResponse: (response: IldcpResponse) => Buffer;
declare const fetch: (sendData: (data: Buffer) => Promise<Buffer>, request?: IldcpRequest | undefined) => Promise<IldcpResponse>;
export interface ServeSettings {
    requestPacket: Buffer;
    handler: (request: IldcpRequest) => Promise<IldcpResponse>;
    serverAddress: string;
}
declare const serve: ({ requestPacket, handler, serverAddress }: ServeSettings) => Promise<Buffer>;
declare class Tag<N extends string> {
    protected __nominal: N;
}
declare type Brand<T, N extends string> = T & Tag<N>;
declare type AssetScale = Brand<number, 'AssetScale'>;
declare const isValidAssetScale: (o: unknown) => o is AssetScale;
export { deserializeIldcpRequest, serializeIldcpRequest, deserializeIldcpResponse, serializeIldcpResponse, fetch, serve, AssetScale, isValidAssetScale, };
