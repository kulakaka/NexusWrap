{"version":3,"file":"receipt.js","sourceRoot":"","sources":["../../../src/util/receipt.ts"],"names":[],"mappings":";;;AAAA,yCAA0C;AAC1C,iCAAiD;AAEjD,sCAA+C;AAElC,QAAA,eAAe,GAAG,CAAC,CAAA;AAoBhC,SAAgB,aAAa,CAAC,IAAiB;IAC7C,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,EAAE,EAAE;QAC5B,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAA;KAClD;IACD,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,EAAE,EAAE;QAC7B,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAA;KACnD;IACD,MAAM,OAAO,GAAG,IAAI,kBAAM,CAAC,EAAE,CAAC,CAAA;IAC9B,OAAO,CAAC,UAAU,CAAC,uBAAe,CAAC,CAAA;IACnC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC,CAAA;IACxC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;IACjC,OAAO,CAAC,WAAW,CAAC,IAAA,oBAAa,EAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC,CAAA;IAC5D,OAAO,CAAC,gBAAgB,CAAC,IAAA,4BAAmB,EAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,SAAS,EAAE,CAAC,EAAE,EAAE,CAAC,CAAA;IACnF,OAAO,OAAO,CAAC,SAAS,EAAE,CAAA;AAC5B,CAAC;AAdD,sCAcC;AAED,SAAS,MAAM,CAAC,OAAe;IAC7B,IAAI,OAAO,CAAC,MAAM,KAAK,EAAE,EAAE;QACzB,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAA;KACrC;IACD,MAAM,MAAM,GAAG,kBAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;IACnC,MAAM,OAAO,GAAG,MAAM,CAAC,eAAe,EAAE,CAAA;IACxC,MAAM,KAAK,GAAG,MAAM,CAAC,eAAe,CAAC,EAAE,CAAC,CAAA;IACxC,MAAM,QAAQ,GAAG,MAAM,CAAC,SAAS,EAAE,CAAA;IACnC,MAAM,aAAa,GAAG,MAAM,CAAC,cAAc,EAAE,CAAA;IAC7C,MAAM,IAAI,GAAG,MAAM,CAAC,eAAe,CAAC,EAAE,CAAC,CAAA;IACvC,OAAO;QACL,OAAO;QACP,KAAK;QACL,QAAQ;QACR,aAAa;QACb,IAAI;KACL,CAAA;AACH,CAAC;AAED,SAAgB,aAAa,CAAC,OAAe;IAC3C,OAAO,MAAM,CAAC,OAAO,CAAC,CAAA;AACxB,CAAC;AAFD,sCAEC;AAED,SAAgB,aAAa,CAC3B,OAAe,EACf,MAAuD;IAEvD,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,CAAA;IAC/B,IAAI,OAAO,CAAC,OAAO,KAAK,uBAAe,EAAE;QACvC,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAA;KACnC;IACD,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE;QAChC,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,CAAA;KACzB;IACD,MAAM,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;IACpC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,IAAA,4BAAmB,EAAC,MAAM,EAAE,OAAO,CAAC,CAAC,EAAE;QAC9D,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAA;KAChC;IACD,OAAO,OAAO,CAAA;AAChB,CAAC;AAhBD,sCAgBC","sourcesContent":["import { Reader, Writer } from 'oer-utils'\nimport { longFromValue, LongValue } from './long'\nimport Long from 'long'\nimport { generateReceiptHMAC } from '../crypto'\n\nexport const RECEIPT_VERSION = 1\n\nexport interface ReceiptOpts {\n  nonce: Buffer\n  streamId: LongValue\n  totalReceived: LongValue\n  secret: Buffer\n}\n\nexport interface Receipt {\n  version: number\n  nonce: Buffer\n  streamId: string\n  totalReceived: Long\n}\n\nexport interface ReceiptWithHMAC extends Receipt {\n  hmac: Buffer\n}\n\nexport function createReceipt(opts: ReceiptOpts): Buffer {\n  if (opts.nonce.length !== 16) {\n    throw new Error('receipt nonce must be 16 bytes')\n  }\n  if (opts.secret.length !== 32) {\n    throw new Error('receipt secret must be 32 bytes')\n  }\n  const receipt = new Writer(58)\n  receipt.writeUInt8(RECEIPT_VERSION)\n  receipt.writeOctetString(opts.nonce, 16)\n  receipt.writeUInt8(opts.streamId)\n  receipt.writeUInt64(longFromValue(opts.totalReceived, true))\n  receipt.writeOctetString(generateReceiptHMAC(opts.secret, receipt.getBuffer()), 32)\n  return receipt.getBuffer()\n}\n\nfunction decode(receipt: Buffer): ReceiptWithHMAC {\n  if (receipt.length !== 58) {\n    throw new Error('receipt malformed')\n  }\n  const reader = Reader.from(receipt)\n  const version = reader.readUInt8Number()\n  const nonce = reader.readOctetString(16)\n  const streamId = reader.readUInt8()\n  const totalReceived = reader.readUInt64Long()\n  const hmac = reader.readOctetString(32)\n  return {\n    version,\n    nonce,\n    streamId,\n    totalReceived,\n    hmac,\n  }\n}\n\nexport function decodeReceipt(receipt: Buffer): Receipt {\n  return decode(receipt)\n}\n\nexport function verifyReceipt(\n  receipt: Buffer,\n  secret: Buffer | ((decoded: ReceiptWithHMAC) => Buffer)\n): Receipt {\n  const decoded = decode(receipt)\n  if (decoded.version !== RECEIPT_VERSION) {\n    throw new Error('invalid version')\n  }\n  if (typeof secret === 'function') {\n    secret = secret(decoded)\n  }\n  const message = receipt.slice(0, 26)\n  if (!decoded.hmac.equals(generateReceiptHMAC(secret, message))) {\n    throw new Error('invalid hmac')\n  }\n  return decoded\n}\n"]}