{"version":3,"file":"stoppable-timeout.js","sourceRoot":"","sources":["../../../src/util/stoppable-timeout.ts"],"names":[],"mappings":";;;AAGA,MAAa,gBAAgB;IAA7B;QACU,YAAO,GAAG,KAAK,CAAA;IAsBzB,CAAC;IAlBC,IAAI,CAAC,KAAa;QAChB,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC,CAAA;SAClD;QAED,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,OAAO,EAAE,KAAK,CAAC,CAAA;YACvC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACtB,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,IAAI;QACF,IAAI,IAAI,CAAC,KAAK;YAAE,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QACxC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAA;QACnB,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC,CAAA;SACxC;IACH,CAAC;CACF;AAvBD,4CAuBC","sourcesContent":["// When `stop` is been called:\n// - The current `wait` promise (if any) will reject.\n// - All future `wait` calls will reject.\nexport class StoppableTimeout {\n  private stopped = false\n  private timer?: NodeJS.Timer\n  private reject?: (err: Error) => void\n\n  wait(delay: number): Promise<void> {\n    if (this.stopped) {\n      return Promise.reject(new Error('timer stopped'))\n    }\n\n    return new Promise((resolve, reject) => {\n      this.timer = setTimeout(resolve, delay)\n      this.reject = reject\n    })\n  }\n\n  stop(): void {\n    if (this.timer) clearTimeout(this.timer)\n    this.stopped = true\n    if (this.reject) {\n      this.reject(new Error('timer stopped'))\n    }\n  }\n}\n"]}