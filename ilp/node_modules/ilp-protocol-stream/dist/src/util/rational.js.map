{"version":3,"file":"rational.js","sourceRoot":"","sources":["../../../src/util/rational.ts"],"names":[],"mappings":";;;;;AAAA,oDAA2B;AAC3B,gDAAuB;AACvB,iCAAqF;AAErF,MAAqB,QAAQ;IAO3B,YAAY,KAAW,EAAE,KAAW,EAAE,QAAiB;QACrD,IAAI,CAAC,QAAQ,EAAE;YACb,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAA;SACxD;QACD,gBAAM,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,EAAE,QAAQ,EAAE,iCAAiC,CAAC,CAAA;QAC/E,gBAAM,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,EAAE,QAAQ,EAAE,mCAAmC,CAAC,CAAA;QACjF,IAAA,gBAAM,EAAC,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,8BAA8B,CAAC,CAAA;QACvD,IAAI,CAAC,CAAC,GAAG,KAAK,CAAA;QACd,IAAI,CAAC,CAAC,GAAG,KAAK,CAAA;QACd,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;IAC1B,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,KAAc;QAC9B,OAAO,KAAK,YAAY,QAAQ,CAAA;IAClC,CAAC;IAED,MAAM,CAAC,WAAW,CAAC,KAAa,EAAE,KAAa,EAAE,QAAiB;QAChE,OAAO,IAAI,QAAQ,CACjB,cAAI,CAAC,UAAU,CAAC,KAAK,EAAE,QAAQ,CAAC,EAChC,cAAI,CAAC,UAAU,CAAC,KAAK,EAAE,QAAQ,CAAC,EAChC,QAAQ,CACT,CAAA;IACH,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,KAAa,EAAE,QAAiB;QAChD,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;YACpB,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAA;SACxC;aAAM,IAAI,QAAQ,IAAI,KAAK,GAAG,CAAC,EAAE;YAChC,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAA;SACnD;QAGD,IAAI,KAAK,GAAG,CAAC,KAAK,CAAC,EAAE;YACnB,OAAO,QAAQ,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAA;SAChD;QAKD,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAA;QACnD,IAAI,KAAK,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,GAAG,CAAA;QACnC,IAAI,GAAG,GAAG,CAAC,CAAA;QACX,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,KAAK,GAAG,GAAG,IAAI,KAAK,GAAG,CAAC,EAAE;YAC3D,GAAG,IAAI,EAAE,CAAA;YACT,KAAK,EAAE,CAAA;SACR;QAED,OAAO,QAAQ,CAAC,WAAW,CAAC,KAAK,GAAG,GAAG,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAA;IACzD,CAAC;IAKD,cAAc,CAAC,KAAW;QACxB,OAAO,IAAA,0BAAmB,EAAC,KAAK,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAA;IACnD,CAAC;IAED,kBAAkB,CAAC,KAAW;QAC5B,OAAO,IAAA,yBAAkB,EAAC,KAAK,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAA;IAClD,CAAC;IAGD,kBAAkB,CAAC,KAAe;QAChC,OAAO,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAA;IACxF,CAAC;IAED,cAAc;QACZ,OAAO,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;IACnC,CAAC;IAKD,UAAU;QACR,IAAI,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;YAC9B,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAA;SACzD;QACD,OAAO,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAA;IACrE,CAAC;IAKD,UAAU;QACR,OAAO,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAA;IACpD,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,CAAC,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAA;IAC9C,CAAC;IAED,QAAQ;QAGN,MAAM,GAAG,GAAG,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAA;QAC5C,OAAO,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAA;IAC7D,CAAC;IAEO,OAAO,CAAC,MAAe;QAC7B,MAAM,GAAG,MAAM,IAAI,CAAC,CAAA;QACpB,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QACtC,IAAI,MAAM,KAAK,CAAC,EAAE;YAChB,OAAO,QAAQ,CAAC,QAAQ,EAAE,CAAA;SAC3B;QAED,MAAM,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QACvC,MAAM,eAAe,GAAG,IAAA,0BAAmB,EAAC,SAAS,EAAE,OAAO,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAA;QAE1F,OAAO,QAAQ,CAAC,QAAQ,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,eAAe,CAAC,MAAM,CAAC,GAAG,eAAe,CAAA;IAClG,CAAC;;AApHH,2BAqHC;AApHQ,cAAK,GAAG,IAAI,QAAQ,CAAC,cAAI,CAAC,KAAK,EAAE,cAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;AAsH1D,SAAS,SAAS,CAAC,GAAW,EAAE,EAAU;IACxC,KAAK,IAAI,CAAC,GAAG,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;QACxC,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE;YACjB,OAAO,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAA;SAC3B;KACF;IACD,OAAO,EAAE,CAAA;AACX,CAAC;AAED,SAAS,OAAO,CAAC,CAAS;IACxB,MAAM,GAAG,GAAG,cAAI,CAAC,UAAU,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;IACrC,IAAI,KAAK,GAAG,cAAI,CAAC,IAAI,CAAA;IACrB,OAAO,CAAC,EAAE;QAAE,KAAK,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAA;IACvC,OAAO,KAAK,CAAA;AACd,CAAC","sourcesContent":["import assert from 'assert'\nimport Long from 'long'\nimport { multiplyDivideFloor, multiplyDivideCeil, multiplyDivideRound } from './long'\n\nexport default class Rational {\n  static UZERO = new Rational(Long.UZERO, Long.UONE, true)\n\n  private a: Long\n  private b: Long\n  public unsigned: boolean\n\n  constructor(numer: Long, denom: Long, unsigned: boolean) {\n    if (!unsigned) {\n      throw new Error('signed rationals are not implemented')\n    }\n    assert.strictEqual(numer.unsigned, unsigned, 'numerator is incorrectly signed')\n    assert.strictEqual(denom.unsigned, unsigned, 'denominator is incorrectly signed')\n    assert(!denom.isZero(), 'denominator must be non-zero')\n    this.a = numer\n    this.b = denom\n    this.unsigned = unsigned\n  }\n\n  static isRational(value: unknown): value is Rational {\n    return value instanceof Rational\n  }\n\n  static fromNumbers(numer: number, denom: number, unsigned: boolean): Rational {\n    return new Rational(\n      Long.fromNumber(numer, unsigned),\n      Long.fromNumber(denom, unsigned),\n      unsigned\n    )\n  }\n\n  static fromNumber(value: number, unsigned: boolean): Rational {\n    if (!isFinite(value)) {\n      throw new Error('value must be finite')\n    } else if (unsigned && value < 0) {\n      throw new Error('unsigned value must be positive')\n    }\n\n    // Integers become value/1.\n    if (value % 1 === 0) {\n      return Rational.fromNumbers(value, 1, unsigned)\n    }\n\n    // Really simple float â†’ rational conversion. There's probably a better way\n    // to do this. That said, creating a Rational from two Longs is always going\n    // to be more precise.\n    const mag = Math.floor(Math.log(value) / Math.LN10)\n    let shift = mag < 0 ? 18 : 18 - mag\n    let den = 1\n    while (Math.floor(value * den) !== value * den && shift > 0) {\n      den *= 10\n      shift--\n    }\n\n    return Rational.fromNumbers(value * den, den, unsigned)\n  }\n\n  /**\n   * Multiply a rational by a Long without intermediate overflow.\n   */\n  multiplyByLong(value: Long): Long {\n    return multiplyDivideFloor(value, this.a, this.b)\n  }\n\n  multiplyByLongCeil(value: Long): Long {\n    return multiplyDivideCeil(value, this.a, this.b)\n  }\n\n  // TODO prevent overflows by reducing fraction when necessary\n  multiplyByRational(other: Rational): Rational {\n    return new Rational(this.a.multiply(other.a), this.b.multiply(other.b), this.unsigned)\n  }\n\n  greaterThanOne(): boolean {\n    return this.a.greaterThan(this.b)\n  }\n\n  /**\n   * Returns `1 - this`.\n   */\n  complement(): Rational {\n    if (this.a.greaterThan(this.b)) {\n      throw new Error('cannot take complement of rational >1')\n    }\n    return new Rational(this.b.subtract(this.a), this.b, this.unsigned)\n  }\n\n  /**\n   * Returns `1 / this`.\n   */\n  reciprocal(): Rational {\n    return new Rational(this.b, this.a, this.unsigned)\n  }\n\n  toNumber(): number {\n    return this.a.toNumber() / this.b.toNumber()\n  }\n\n  toString(): string {\n    // 19 is the highest precision achievable using this method, since 1e19 is\n    // the largest power of 10 that fits in a uint64.\n    const str = trimRight(this.toFixed(19), '0')\n    return str[str.length - 1] === '.' ? str.slice(0, -1) : str\n  }\n\n  private toFixed(digits?: number): string {\n    digits = digits || 0\n    const quotient = this.a.divide(this.b)\n    if (digits === 0) {\n      return quotient.toString()\n    }\n\n    const remainder = this.a.modulo(this.b)\n    const remainderString = multiplyDivideRound(remainder, power10(digits), this.b).toString()\n\n    return quotient.toString() + '.' + '0'.repeat(digits - remainderString.length) + remainderString\n  }\n}\n\nfunction trimRight(str: string, ch: string): string {\n  for (let i = str.length - 1; i >= 0; i--) {\n    if (str[i] !== ch) {\n      return str.slice(0, i + 1)\n    }\n  }\n  return ''\n}\n\nfunction power10(n: number): Long {\n  const ten = Long.fromNumber(10, true)\n  let value = Long.UONE\n  while (n--) value = value.multiply(ten)\n  return value\n}\n"]}