{"version":3,"file":"packet.js","sourceRoot":"","sources":["../../src/packet.ts"],"names":[],"mappings":"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","sourcesContent":["import { Reader, Writer, WriterInterface, Predictor } from 'oer-utils'\nimport * as IlpPacket from 'ilp-packet'\nimport Long from 'long'\nimport { encrypt, decrypt, ENCRYPTION_OVERHEAD } from './crypto'\nimport { LongValue, longFromValue } from './util/long'\n\nconst VERSION = Long.fromNumber(1, true)\n\nconst ZERO_BYTES = Buffer.alloc(32)\n\nexport const IlpPacketType = {\n  Prepare: IlpPacket.Type.TYPE_ILP_PREPARE,\n  Fulfill: IlpPacket.Type.TYPE_ILP_FULFILL,\n  Reject: IlpPacket.Type.TYPE_ILP_REJECT,\n}\n\n/**\n * STREAM Protocol Error Codes\n */\nexport enum ErrorCode {\n  NoError = 0x01,\n  InternalError = 0x02,\n  EndpointBusy = 0x03,\n  FlowControlError = 0x04,\n  StreamIdError = 0x05,\n  StreamStateError = 0x06,\n  FrameFormatError = 0x07,\n  ProtocolViolation = 0x08,\n  ApplicationError = 0x09,\n}\n\n/**\n * STREAM Protocol Frame Identifiers\n */\nexport enum FrameType {\n  ConnectionClose = 0x01,\n  ConnectionNewAddress = 0x02,\n  ConnectionMaxData = 0x03,\n  ConnectionDataBlocked = 0x04,\n  ConnectionMaxStreamId = 0x05,\n  ConnectionStreamIdBlocked = 0x06,\n  ConnectionAssetDetails = 0x07,\n\n  StreamClose = 0x10,\n  StreamMoney = 0x11,\n  StreamMaxMoney = 0x12,\n  StreamMoneyBlocked = 0x13,\n  StreamData = 0x14,\n  StreamMaxData = 0x15,\n  StreamDataBlocked = 0x16,\n  StreamReceipt = 0x17,\n}\n\n/**\n * All of the frames included in the STREAM protocol\n */\nexport type Frame =\n  | ConnectionCloseFrame\n  | ConnectionNewAddressFrame\n  | ConnectionAssetDetailsFrame\n  | ConnectionMaxDataFrame\n  | ConnectionDataBlockedFrame\n  | ConnectionMaxStreamIdFrame\n  | ConnectionStreamIdBlockedFrame\n  | StreamCloseFrame\n  | StreamMoneyFrame\n  | StreamMaxMoneyFrame\n  | StreamMoneyBlockedFrame\n  | StreamDataFrame\n  | StreamMaxDataFrame\n  | StreamDataBlockedFrame\n  | StreamReceiptFrame\n\n/**\n * STREAM Protocol Packet\n *\n * Each packet is comprised of a header and zero or more Frames.\n * Packets are serialized, encrypted, and sent as the data field in ILP Packets.\n */\nexport class Packet {\n  sequence: Long\n  ilpPacketType: IlpPacket.Type\n  prepareAmount: Long\n  frames: Frame[]\n\n  constructor(\n    sequence: LongValue,\n    ilpPacketType: IlpPacket.Type,\n    packetAmount: LongValue = Long.UZERO,\n    frames: Frame[] = []\n  ) {\n    this.sequence = longFromValue(sequence, true)\n    this.ilpPacketType = ilpPacketType\n    this.prepareAmount = longFromValue(packetAmount, true)\n    this.frames = frames\n  }\n\n  static async decryptAndDeserialize(pskEncryptionKey: Buffer, buffer: Buffer): Promise<Packet> {\n    let decrypted: Buffer\n    try {\n      decrypted = await decrypt(pskEncryptionKey, buffer)\n    } catch (err) {\n      throw new Error(\n        `Unable to decrypt packet. Data was corrupted or packet was encrypted with the wrong key`\n      )\n    }\n    return Packet._deserializeUnencrypted(decrypted)\n  }\n\n  /** @private */\n  static _deserializeUnencrypted(buffer: Buffer): Packet {\n    const reader = Reader.from(buffer)\n    const version = reader.readUInt8Long()\n    if (!version.equals(VERSION)) {\n      throw new Error(`Unsupported protocol version: ${version}`)\n    }\n    const ilpPacketType = reader.readUInt8Number()\n    const sequence = reader.readVarUIntLong()\n    const packetAmount = reader.readVarUIntLong()\n    const numFrames = reader.readVarUIntNumber()\n    const frames: Frame[] = []\n\n    for (let i = 0; i < numFrames; i++) {\n      const frame = parseFrame(reader)\n      if (frame) {\n        frames.push(frame)\n      }\n    }\n    return new Packet(sequence, ilpPacketType, packetAmount, frames)\n  }\n\n  serializeAndEncrypt(pskEncryptionKey: Buffer, padPacketToSize?: number): Promise<Buffer> {\n    const serialized = this._serialize()\n\n    // Pad packet to max data size, if desired\n    if (padPacketToSize !== undefined) {\n      const paddingSize = padPacketToSize - ENCRYPTION_OVERHEAD - serialized.length\n      const args = [serialized]\n      for (let i = 0; i < Math.floor(paddingSize / 32); i++) {\n        args.push(ZERO_BYTES)\n      }\n      args.push(ZERO_BYTES.slice(0, paddingSize % 32))\n      return encrypt(pskEncryptionKey, ...args)\n    }\n\n    return encrypt(pskEncryptionKey, serialized)\n  }\n\n  /** @private */\n  _serialize(): Buffer {\n    const predictor = new Predictor()\n    this.writeTo(predictor)\n    const writer = new Writer(predictor.length)\n    this.writeTo(writer)\n    return writer.getBuffer()\n  }\n\n  writeTo(writer: WriterInterface): void {\n    // Write the packet header\n    writer.writeUInt8(VERSION)\n    writer.writeUInt8(this.ilpPacketType)\n    writer.writeVarUInt(this.sequence)\n    writer.writeVarUInt(this.prepareAmount)\n\n    // Write the number of frames (excluding padding)\n    writer.writeVarUInt(this.frames.length)\n\n    // Write each of the frames\n    for (const frame of this.frames) {\n      frame.writeTo(writer)\n    }\n  }\n\n  byteLength(): number {\n    const predictor = new Predictor()\n    this.writeTo(predictor)\n    return predictor.getSize() + ENCRYPTION_OVERHEAD\n  }\n}\n\n/**\n * Base class that each Frame extends\n */\nexport abstract class BaseFrame {\n  type: FrameType\n  name: string\n\n  constructor(name: keyof typeof FrameType) {\n    this.type = FrameType[name]\n    this.name = name\n  }\n\n  static fromContents(_reader: Reader): BaseFrame {\n    throw new Error(`class method \"fromContents\" is not implemented`)\n  }\n\n  writeTo<T extends WriterInterface>(writer: T): T {\n    const predictor = new Predictor()\n    this.writeContentsTo(predictor)\n    writer.writeUInt8(this.type)\n    this.writeContentsTo(writer.createVarOctetString(predictor.length))\n    return writer\n  }\n\n  protected writeContentsTo<T extends BaseFrame>(this: T, contents: WriterInterface) {\n    const properties = Object.getOwnPropertyNames(this).filter(\n      (propName: string) => propName !== 'type' && propName !== 'name'\n    ) as (keyof T)[]\n    for (const prop of properties) {\n      const value = this[prop]\n      if (typeof value === 'number') {\n        contents.writeUInt8(value)\n      } else if (typeof value === 'string') {\n        contents.writeVarOctetString(Buffer.from(value, 'utf8'))\n      } else if (Buffer.isBuffer(value)) {\n        contents.writeVarOctetString(value)\n      } else if (Long.isLong(value)) {\n        contents.writeVarUInt(value)\n      } else {\n        throw new Error(`Unexpected property type for property \"${prop}\": ${typeof value}`)\n      }\n    }\n  }\n\n  byteLength(): number {\n    const predictor = new Predictor()\n    this.writeTo(predictor)\n    return predictor.getSize()\n  }\n}\n\nexport class ConnectionCloseFrame extends BaseFrame {\n  type = FrameType.ConnectionClose as const\n  errorCode: ErrorCode\n  errorMessage: string\n\n  constructor(errorCode: ErrorCode, errorMessage: string) {\n    super('ConnectionClose')\n    this.errorCode = errorCode\n    this.errorMessage = errorMessage\n  }\n\n  static fromContents(reader: Reader): ConnectionCloseFrame {\n    const errorCode = reader.readUInt8Number() as ErrorCode\n    const errorMessage = reader.readVarOctetString().toString()\n    return new ConnectionCloseFrame(errorCode, errorMessage)\n  }\n}\n\nexport class ConnectionNewAddressFrame extends BaseFrame {\n  type = FrameType.ConnectionNewAddress as const\n  sourceAccount: string\n\n  constructor(sourceAccount: string) {\n    super('ConnectionNewAddress')\n    this.sourceAccount = sourceAccount\n  }\n\n  static fromContents(reader: Reader): ConnectionNewAddressFrame {\n    const sourceAccount = reader.readVarOctetString().toString('utf8')\n    return new ConnectionNewAddressFrame(sourceAccount)\n  }\n}\n\nexport class ConnectionAssetDetailsFrame extends BaseFrame {\n  type = FrameType.ConnectionAssetDetails as const\n  sourceAssetCode: string\n  sourceAssetScale: number\n\n  constructor(sourceAssetCode: string, sourceAssetScale: number) {\n    super('ConnectionAssetDetails')\n    this.sourceAssetCode = sourceAssetCode\n    this.sourceAssetScale = sourceAssetScale\n  }\n\n  static fromContents(reader: Reader): ConnectionAssetDetailsFrame {\n    const sourceAssetCode = reader.readVarOctetString().toString('utf8')\n    const sourceAssetScale = reader.readUInt8Number()\n    return new ConnectionAssetDetailsFrame(sourceAssetCode, sourceAssetScale)\n  }\n}\n\nexport class ConnectionMaxDataFrame extends BaseFrame {\n  type = FrameType.ConnectionMaxData as const\n  maxOffset: Long\n\n  constructor(maxOffset: LongValue) {\n    super('ConnectionMaxData')\n    this.maxOffset = longFromValue(maxOffset, true)\n  }\n\n  static fromContents(reader: Reader): ConnectionMaxDataFrame {\n    const maxOffset = reader.readVarUIntLong()\n    return new ConnectionMaxDataFrame(maxOffset)\n  }\n}\n\nexport class ConnectionDataBlockedFrame extends BaseFrame {\n  type = FrameType.ConnectionDataBlocked as const\n  maxOffset: Long\n\n  constructor(maxOffset: LongValue) {\n    super('ConnectionDataBlocked')\n    this.maxOffset = longFromValue(maxOffset, true)\n  }\n\n  static fromContents(reader: Reader): ConnectionDataBlockedFrame {\n    const maxOffset = reader.readVarUIntLong()\n    return new ConnectionDataBlockedFrame(maxOffset)\n  }\n}\n\nexport class ConnectionMaxStreamIdFrame extends BaseFrame {\n  type = FrameType.ConnectionMaxStreamId as const\n  maxStreamId: Long\n\n  constructor(maxStreamId: LongValue) {\n    super('ConnectionMaxStreamId')\n    this.maxStreamId = longFromValue(maxStreamId, true)\n  }\n\n  static fromContents(reader: Reader): ConnectionMaxStreamIdFrame {\n    const maxStreamId = reader.readVarUIntLong()\n    return new ConnectionMaxStreamIdFrame(maxStreamId)\n  }\n}\n\nexport class ConnectionStreamIdBlockedFrame extends BaseFrame {\n  type = FrameType.ConnectionStreamIdBlocked as const\n  maxStreamId: Long\n\n  constructor(maxStreamId: LongValue) {\n    super('ConnectionStreamIdBlocked')\n    this.maxStreamId = longFromValue(maxStreamId, true)\n  }\n\n  static fromContents(reader: Reader): ConnectionStreamIdBlockedFrame {\n    const maxStreamId = reader.readVarUIntLong()\n    return new ConnectionStreamIdBlockedFrame(maxStreamId)\n  }\n}\n\nexport class StreamCloseFrame extends BaseFrame {\n  type = FrameType.StreamClose as const\n  streamId: Long\n  errorCode: ErrorCode\n  errorMessage: string\n\n  constructor(streamId: LongValue, errorCode: ErrorCode, errorMessage: string) {\n    super('StreamClose')\n    this.streamId = longFromValue(streamId, true)\n    this.errorCode = errorCode\n    this.errorMessage = errorMessage\n  }\n\n  static fromContents(reader: Reader): StreamCloseFrame {\n    const streamId = reader.readVarUIntLong()\n    const errorCode = reader.readUInt8Number() as ErrorCode\n    const errorMessage = reader.readVarOctetString().toString('utf8')\n    return new StreamCloseFrame(streamId, errorCode, errorMessage)\n  }\n}\n\nexport class StreamMoneyFrame extends BaseFrame {\n  type = FrameType.StreamMoney as const\n  streamId: Long\n  shares: Long\n\n  constructor(streamId: LongValue, shares: LongValue) {\n    super('StreamMoney')\n    this.streamId = longFromValue(streamId, true)\n    this.shares = longFromValue(shares, true)\n  }\n\n  static fromContents(reader: Reader): StreamMoneyFrame {\n    const streamId = reader.readVarUIntLong()\n    const amount = reader.readVarUIntLong()\n    return new StreamMoneyFrame(streamId, amount)\n  }\n}\n\nexport class StreamMaxMoneyFrame extends BaseFrame {\n  type = FrameType.StreamMaxMoney as const\n  streamId: Long\n  receiveMax: Long\n  totalReceived: Long\n\n  constructor(streamId: LongValue, receiveMax: LongValue, totalReceived: LongValue) {\n    super('StreamMaxMoney')\n    if (typeof receiveMax === 'number' && !isFinite(receiveMax)) {\n      receiveMax = Long.MAX_UNSIGNED_VALUE\n    }\n\n    this.streamId = longFromValue(streamId, true)\n    this.receiveMax = longFromValue(receiveMax, true)\n    this.totalReceived = longFromValue(totalReceived, true)\n  }\n\n  static fromContents(reader: Reader): StreamMaxMoneyFrame {\n    const streamId = reader.readVarUIntLong()\n    const receiveMax = saturatingReadVarUInt(reader)\n    const totalReceived = reader.readVarUIntLong()\n    return new StreamMaxMoneyFrame(streamId, receiveMax, totalReceived)\n  }\n}\n\nexport class StreamMoneyBlockedFrame extends BaseFrame {\n  type = FrameType.StreamMoneyBlocked as const\n  streamId: Long\n  sendMax: Long\n  totalSent: Long\n\n  constructor(streamId: LongValue, sendMax: LongValue, totalSent: LongValue) {\n    super('StreamMoneyBlocked')\n    this.streamId = longFromValue(streamId, true)\n    this.sendMax = longFromValue(sendMax, true)\n    this.totalSent = longFromValue(totalSent, true)\n  }\n\n  static fromContents(reader: Reader): StreamMoneyBlockedFrame {\n    const streamId = reader.readVarUIntLong()\n    const sendMax = saturatingReadVarUInt(reader)\n    const totalSent = reader.readVarUIntLong()\n    return new StreamMoneyBlockedFrame(streamId, sendMax, totalSent)\n  }\n}\n\nexport class StreamDataFrame extends BaseFrame {\n  type = FrameType.StreamData as const\n  streamId: Long\n  offset: Long\n  data: Buffer\n\n  constructor(streamId: LongValue, offset: LongValue, data: Buffer) {\n    super('StreamData')\n    this.streamId = longFromValue(streamId, true)\n    this.offset = longFromValue(offset, true)\n    this.data = data\n  }\n\n  static fromContents(reader: Reader): StreamDataFrame {\n    const streamId = reader.readVarUIntLong()\n    const offset = reader.readVarUIntLong()\n    const data = reader.readVarOctetString()\n    return new StreamDataFrame(streamId, offset, data)\n  }\n\n  // Leave out the data because that may be very long\n  toJSON(): Record<string, unknown> {\n    return {\n      type: this.type,\n      name: this.name,\n      streamId: this.streamId,\n      offset: this.offset,\n      dataLength: this.data.length,\n    }\n  }\n}\n\nexport class StreamMaxDataFrame extends BaseFrame {\n  type = FrameType.StreamMaxData as const\n  streamId: Long\n  maxOffset: Long\n\n  constructor(streamId: LongValue, maxOffset: LongValue) {\n    super('StreamMaxData')\n    this.streamId = longFromValue(streamId, true)\n    this.maxOffset = longFromValue(maxOffset, true)\n  }\n\n  static fromContents(reader: Reader): StreamMaxDataFrame {\n    const streamId = reader.readVarUIntLong()\n    const maxOffset = reader.readVarUIntLong()\n    return new StreamMaxDataFrame(streamId, maxOffset)\n  }\n}\n\nexport class StreamDataBlockedFrame extends BaseFrame {\n  type = FrameType.StreamDataBlocked as const\n  streamId: Long\n  maxOffset: Long\n\n  constructor(streamId: LongValue, maxOffset: LongValue) {\n    super('StreamDataBlocked')\n    this.streamId = longFromValue(streamId, true)\n    this.maxOffset = longFromValue(maxOffset, true)\n  }\n\n  static fromContents(reader: Reader): StreamDataBlockedFrame {\n    const streamId = reader.readVarUIntLong()\n    const maxOffset = reader.readVarUIntLong()\n    return new StreamDataBlockedFrame(streamId, maxOffset)\n  }\n}\n\nexport class StreamReceiptFrame extends BaseFrame {\n  type = FrameType.StreamReceipt as const\n  streamId: Long\n  receipt: Buffer\n\n  constructor(streamId: LongValue, receipt: Buffer) {\n    super('StreamReceipt')\n    this.streamId = longFromValue(streamId, true)\n    this.receipt = receipt\n  }\n\n  static fromContents(reader: Reader): StreamReceiptFrame {\n    const streamId = reader.readVarUIntLong()\n    const receipt = reader.readVarOctetString()\n    return new StreamReceiptFrame(streamId, receipt)\n  }\n\n  toJSON(): Record<string, unknown> {\n    return {\n      type: this.type,\n      name: this.name,\n      streamId: this.streamId,\n      receipt: this.receipt.toString('base64'),\n    }\n  }\n}\n\nfunction parseFrame(reader: Reader): Frame | undefined {\n  const type = reader.readUInt8Number()\n  const contents = Reader.from(reader.readVarOctetString())\n\n  switch (type) {\n    case FrameType.ConnectionClose:\n      return ConnectionCloseFrame.fromContents(contents)\n    case FrameType.ConnectionNewAddress:\n      return ConnectionNewAddressFrame.fromContents(contents)\n    case FrameType.ConnectionAssetDetails:\n      return ConnectionAssetDetailsFrame.fromContents(contents)\n    case FrameType.ConnectionMaxData:\n      return ConnectionMaxDataFrame.fromContents(contents)\n    case FrameType.ConnectionDataBlocked:\n      return ConnectionDataBlockedFrame.fromContents(contents)\n    case FrameType.ConnectionMaxStreamId:\n      return ConnectionMaxStreamIdFrame.fromContents(contents)\n    case FrameType.ConnectionStreamIdBlocked:\n      return ConnectionStreamIdBlockedFrame.fromContents(contents)\n    case FrameType.StreamClose:\n      return StreamCloseFrame.fromContents(contents)\n    case FrameType.StreamMoney:\n      return StreamMoneyFrame.fromContents(contents)\n    case FrameType.StreamMaxMoney:\n      return StreamMaxMoneyFrame.fromContents(contents)\n    case FrameType.StreamMoneyBlocked:\n      return StreamMoneyBlockedFrame.fromContents(contents)\n    case FrameType.StreamData:\n      return StreamDataFrame.fromContents(contents)\n    case FrameType.StreamMaxData:\n      return StreamMaxDataFrame.fromContents(contents)\n    case FrameType.StreamDataBlocked:\n      return StreamDataBlockedFrame.fromContents(contents)\n    case FrameType.StreamReceipt:\n      return StreamReceiptFrame.fromContents(contents)\n    default:\n      return undefined\n  }\n}\n\n// Behaves like `readVarUIntLong`, but returns `Long.MAX_UNSIGNED_VALUE` if the\n// VarUInt is too large to fit in a UInt64.\nfunction saturatingReadVarUInt(reader: Reader): Long {\n  if (reader.peekVarOctetString().length > 8) {\n    reader.skipVarOctetString()\n    return Long.MAX_UNSIGNED_VALUE\n  } else {\n    return reader.readVarUIntLong()\n  }\n}\n"]}