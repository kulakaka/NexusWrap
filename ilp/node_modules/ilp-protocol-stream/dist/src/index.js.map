{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ILDCP from 'ilp-protocol-ildcp'\nimport * as IlpPacket from 'ilp-packet'\nimport createLogger from 'ilp-logger'\nimport './util/formatters'\nimport { Connection, ConnectionOpts } from './connection'\n\nexport { Connection } from './connection'\nexport { DataAndMoneyStream } from './stream'\nexport { Server, ServerOpts, createServer, GenerateAddressSecretOpts } from './server'\nexport {\n  createReceipt,\n  decodeReceipt,\n  verifyReceipt,\n  Receipt,\n  ReceiptOpts,\n  ReceiptWithHMAC,\n  RECEIPT_VERSION,\n} from './util/receipt'\n\nexport interface CreateConnectionOpts extends ConnectionOpts {\n  /** ILP Address of the server */\n  destinationAccount: string\n  /** Shared secret generated by the server */\n  sharedSecret: Buffer\n}\n\n/**\n * Create a [`Connection`]{@link Connection} to a [`Server`]{@link Server} using the `destinationAccount` and `sharedSecret` provided.\n */\nexport async function createConnection(opts: CreateConnectionOpts): Promise<Connection> {\n  const plugin = opts.plugin\n  await plugin.connect()\n  const log = createLogger('ilp-protocol-stream:Client')\n  const { clientAddress, assetCode, assetScale } = await ILDCP.fetch(plugin.sendData.bind(plugin), {\n    expiresAt: opts.getExpiry && opts.getExpiry('peer.config'),\n  })\n  const connection = await Connection.build({\n    ...opts,\n    sourceAccount: clientAddress,\n    assetCode,\n    assetScale,\n    isServer: false,\n    plugin,\n  })\n  plugin.registerDataHandler(async (data: Buffer): Promise<Buffer> => {\n    let prepare: IlpPacket.IlpPrepare\n    try {\n      prepare = IlpPacket.deserializeIlpPrepare(data)\n    } catch (err) {\n      log.error('got data that is not an ILP Prepare packet: %h', data)\n      return IlpPacket.serializeIlpReject({\n        code: 'F00',\n        message: `Expected an ILP Prepare packet (type 12), but got packet with type: ${data[0]}`,\n        data: Buffer.alloc(0),\n        triggeredBy: clientAddress,\n      })\n    }\n\n    try {\n      const fulfill = await connection.handlePrepare(prepare)\n      return IlpPacket.serializeIlpFulfill(fulfill)\n    } catch (err) {\n      if (IlpPacket.isIlpError(err)) {\n        return IlpPacket.errorToReject(clientAddress, err)\n      } else {\n        log.error('error handling prepare:', err)\n\n        return IlpPacket.serializeIlpReject({\n          // TODO should the default be F00 or T00?\n          code: 'F00',\n          message: '',\n          data: Buffer.alloc(0),\n          triggeredBy: clientAddress,\n        })\n      }\n    }\n  })\n  connection.once('close', () => {\n    plugin.deregisterDataHandler()\n    plugin\n      .disconnect()\n      .then(() => log.info('plugin disconnected'))\n      .catch((err: Error) => log.error('error disconnecting plugin:', err))\n  })\n  await connection.connect()\n  // TODO resolve only when it is connected\n  return connection\n}\n"]}