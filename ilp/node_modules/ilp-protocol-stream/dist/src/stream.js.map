{"version":3,"file":"stream.js","sourceRoot":"","sources":["../../src/stream.ts"],"names":[],"mappings":"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","sourcesContent":["import createLogger, { Logger } from 'ilp-logger'\nimport Long from 'long'\nimport { Duplex } from 'stream'\nimport { DataQueue } from './util/data-queue'\nimport { OffsetSorter } from './util/data-offset-sorter'\nimport { LongValue, longFromValue, minLong, checkedAdd, checkedSubtract } from './util/long'\nimport { IlpPrepare } from 'ilp-packet'\n\nconst DEFAULT_TIMEOUT = 60000\n\nconst MAX_REMOTE_RECEIVE = Long.MAX_UNSIGNED_VALUE\n\nexport interface StreamOpts {\n  id: number\n  isServer: boolean\n  connectionId: string\n}\n\nexport interface SendOpts {\n  timeout?: number\n}\n\nexport interface ReceiveOpts {\n  timeout?: number\n}\n\n/**\n * Class used to send money and data over a [Connection]{@link Connection}.\n *\n * This exposes the Node [Duplex Stream](https://nodejs.org/dist/latest-v10.x/docs/api/stream.html#stream_class_stream_duplex) interface for sending data,\n * as well as additional functions for sending money.\n */\nexport class DataAndMoneyStream extends Duplex {\n  readonly id: number\n\n  /** @private */\n  _errorMessage?: string\n  /** @private */\n  _remoteClosed: boolean\n  /** @private */\n  _remoteReceiveMax: Long\n  /** @private */\n  _remoteReceived: Long\n  /** @private */\n  _remoteMaxOffset: number\n  /** @private */\n  _sentEnd: boolean\n  /** @private */\n  _remoteSentEnd: boolean\n\n  protected log: Logger\n  protected isServer: boolean\n\n  protected _totalSent: Long\n  protected _totalReceived: Long\n  protected _sendMax: Long\n  protected _receiveMax: Long\n  protected _outgoingHeldAmount: Long\n\n  protected _closed: boolean\n  protected holds: { [id: string]: Long }\n\n  protected _incomingData: OffsetSorter\n  protected _outgoingData: DataQueue\n  protected _outgoingDataToRetry: { data: Buffer; offset: number }[]\n  protected outgoingOffset: number\n\n  protected _receipt?: Buffer\n\n  protected emittedEnd: boolean\n  protected emittedClose: boolean\n\n  constructor(opts: StreamOpts) {\n    // Half-opened streams are not supported, support may be added in the future.\n    super({ allowHalfOpen: false })\n    this.id = opts.id\n    this.isServer = opts.isServer\n    this.log = createLogger(\n      `ilp-protocol-stream:${this.isServer ? 'Server' : 'Client'}:Connection:${\n        opts.connectionId\n      }:Stream:${this.id}`\n    )\n    this.log.info('new stream created')\n\n    this._totalSent = Long.UZERO\n    this._totalReceived = Long.UZERO\n    this._sendMax = Long.UZERO\n    this._receiveMax = Long.UZERO\n    this._outgoingHeldAmount = Long.UZERO\n\n    this._sentEnd = false\n    this._remoteSentEnd = false\n    this._closed = false\n    this.holds = {}\n\n    this._incomingData = new OffsetSorter()\n    this._outgoingData = new DataQueue()\n    // TODO we might want to merge this with the _outgoingData queue data structure\n    this._outgoingDataToRetry = []\n    this.outgoingOffset = 0\n\n    this._remoteClosed = false\n    this._remoteReceived = Long.UZERO\n    this._remoteReceiveMax = MAX_REMOTE_RECEIVE\n    // TODO should we have a different default?\n    this._remoteMaxOffset = 16384 // 16kb\n\n    this.emittedEnd = false\n    this.emittedClose = false\n    this.once('end', () => {\n      this.emittedEnd = true\n    })\n    this.once('close', () => {\n      this.emittedClose = true\n    })\n  }\n\n  /**\n   * Total amount sent so far, denominated in the connection plugin's units.\n   */\n  get totalSent(): string {\n    return this._totalSent.toString()\n  }\n\n  /**\n   * Total amount received so far, denominated in the connection plugin's units.\n   */\n  get totalReceived(): string {\n    return this._totalReceived.toString()\n  }\n\n  /**\n   * The current limit up to which the stream will try to send, denominated in the connection plugin's units.\n   * (If the `sendMax` is greater than the `totalSent`, the stream will continue to send the difference)\n   */\n  get sendMax(): string {\n    return this._sendMax.toString()\n  }\n\n  /**\n   * The current limit up to which the stream will try to receive, denominated in the connection plugin's units.\n   * (If the `receiveMax` is greater than the `totalReceived`, the stream will continue to receive money when the other side sends it)\n   */\n  get receiveMax(): string {\n    return this._receiveMax.toString()\n  }\n\n  /**\n   * Latest receipt for total sent amount.\n   */\n  get receipt(): Buffer | undefined {\n    return this._receipt\n  }\n\n  get closed(): boolean {\n    return this._closed\n  }\n\n  /**\n   * Returns true if the stream is open for sending and/or receiving.\n   */\n  isOpen(): boolean {\n    return !this.closed\n  }\n\n  /**\n   * Set the total amount this stream will send, denominated in the connection plugin's units.\n   * Note that this is absolute, not relative so calling `setSendMax(100)` twice will only send 100 units.\n   */\n  setSendMax(limit: LongValue): void {\n    if (this.closed) {\n      throw new Error('Stream already closed')\n    } else if (typeof limit === 'number' && !isFinite(limit)) {\n      throw new Error('sendMax must be finite')\n    }\n    const sendMax = longFromValue(limit, true)\n    if (this._totalSent.greaterThan(sendMax)) {\n      this.log.debug(\n        'cannot set sendMax to %s because we have already sent: %s',\n        sendMax,\n        this._totalSent\n      )\n      throw new Error(`Cannot set sendMax lower than the totalSent`)\n    }\n    this.log.debug('setting sendMax to %s', sendMax)\n    this._sendMax = sendMax\n    this.emit('_maybe_start_send_loop')\n  }\n\n  /**\n   * Event fired when money is received\n   * @event money\n   * @type {string} Amount of money received, encoded as a string to avoid loss of precision\n   */\n\n  /**\n   * Set the total amount this stream will receive, denominated in the connection plugin's units.\n   * Note that this is absolute, not relative so calling `setReceiveMax(100)` twice will only let the stream receive 100 units.\n   * @fires money\n   */\n  setReceiveMax(limit: LongValue): void {\n    if (this.closed) {\n      throw new Error('Stream already closed')\n    }\n    const receiveMax = longFromValue(limit, true)\n    if (this._totalReceived.greaterThan(receiveMax)) {\n      this.log.debug(\n        'cannot set receiveMax to %s because we have already received: %s',\n        receiveMax,\n        this._totalReceived\n      )\n      throw new Error('Cannot set receiveMax lower than the totalReceived')\n    }\n    if (this._receiveMax.greaterThan(receiveMax)) {\n      this.log.debug(\n        'cannot set receiveMax to %s because the current limit is: %s',\n        receiveMax,\n        this._receiveMax\n      )\n      throw new Error('Cannot decrease the receiveMax')\n    }\n    this.log.debug('setting receiveMax to %s', receiveMax)\n    this._receiveMax = receiveMax\n    this.emit('_maybe_start_send_loop')\n  }\n\n  /**\n   * Set the total amount the stream will send and wait for that amount to be sent.\n   * Note that this is absolute, not relative so calling `sendTotal(100)` twice will only send 100 units.\n   *\n   * This promise will only resolve when the absolute amount specified is reached, so lowering the `sendMax` may cause this not to resolve.\n   */\n  async sendTotal(_limit: LongValue, opts?: SendOpts): Promise<void> {\n    const limit = longFromValue(_limit, true)\n    const timeout = (opts && opts.timeout) || DEFAULT_TIMEOUT\n    if (this._totalSent.greaterThanOrEqual(limit)) {\n      this.log.debug('already sent %s, not sending any more', this._totalSent)\n      return Promise.resolve()\n    }\n\n    this.setSendMax(limit)\n    await new Promise<void>((resolve, reject) => {\n      const outgoingHandler = () => {\n        if (this._totalSent.greaterThanOrEqual(limit)) {\n          cleanup()\n          resolve()\n        }\n      }\n      const endHandler = () => {\n        // Clean up on next tick in case an error was also emitted\n        setTimeout(cleanup)\n        if (this._totalSent.greaterThanOrEqual(limit)) {\n          resolve()\n        } else {\n          this.log.debug(\n            'Stream was closed before the desired amount was sent (target: %s, totalSent: %s)',\n            limit,\n            this._totalSent\n          )\n          reject(\n            new Error(\n              `Stream was closed before the desired amount was sent (target: ${limit}, totalSent: ${this._totalSent})`\n            )\n          )\n        }\n      }\n      const errorHandler = (err: Error) => {\n        this.log.debug('error waiting for stream to stabilize:', err)\n        cleanup()\n        reject(\n          new Error(\n            `Stream encountered an error before the desired amount was sent (target: ${limit}, totalSent: ${this._totalSent}): ${err}`\n          )\n        )\n      }\n      const timer = setTimeout(() => {\n        cleanup()\n        reject(\n          new Error(\n            `Timed out before the desired amount was sent (target: ${limit}, totalSent: ${this._totalSent})`\n          )\n        )\n      }, timeout)\n      const cleanup = () => {\n        clearTimeout(timer)\n        this.removeListener('outgoing_money', outgoingHandler)\n        this.removeListener('error', errorHandler)\n        this.removeListener('end', endHandler)\n      }\n\n      this.on('outgoing_money', outgoingHandler)\n      this.on('error', errorHandler)\n      this.on('end', endHandler)\n    })\n  }\n\n  /**\n   * Set the total amount the stream will receive and wait for that amount to be received.\n   * Note that this is absolute, not relative so calling `receiveTotal(100)` twice will only receive 100 units.\n   *\n   * This promise will only resolve when the absolute amount specified is reached, so lowering the `receiveMax` may cause this not to resolve.\n   */\n  async receiveTotal(_limit: LongValue, opts?: ReceiveOpts): Promise<void> {\n    const limit = longFromValue(_limit, true)\n    const timeout = (opts && opts.timeout) || DEFAULT_TIMEOUT\n    if (this._totalReceived.greaterThanOrEqual(limit)) {\n      this.log.debug('already received %s, not waiting for more', this._totalReceived)\n      return Promise.resolve()\n    }\n\n    this.setReceiveMax(limit)\n    await new Promise<void>((resolve, reject) => {\n      const moneyHandler = () => {\n        if (this._totalReceived.greaterThanOrEqual(limit)) {\n          cleanup()\n          resolve()\n        }\n      }\n      const endHandler = () => {\n        // Clean up on next tick in case an error was also emitted\n        setTimeout(cleanup)\n        if (this._totalReceived.greaterThanOrEqual(limit)) {\n          resolve()\n        } else {\n          this.log.debug(\n            'Stream was closed before the desired amount was received (target: %s, totalReceived: %s)',\n            limit,\n            this._totalReceived\n          )\n          reject(\n            new Error(\n              `Stream was closed before the desired amount was received (target: ${limit}, totalReceived: ${this._totalReceived})`\n            )\n          )\n        }\n      }\n      const errorHandler = (err: Error) => {\n        this.log.debug('error waiting for stream to stabilize:', err)\n        cleanup()\n        reject(\n          new Error(\n            `Stream encountered an error before the desired amount was received (target: ${limit}, totalReceived: ${this._totalReceived}): ${err}`\n          )\n        )\n      }\n      const timer = setTimeout(() => {\n        cleanup()\n        reject(\n          new Error(\n            `Timed out before the desired amount was received (target: ${limit}, totalReceived: ${this._totalReceived})`\n          )\n        )\n      }, timeout)\n      const cleanup = () => {\n        clearTimeout(timer)\n        this.removeListener('money', moneyHandler)\n        this.removeListener('error', errorHandler)\n        this.removeListener('end', endHandler)\n      }\n\n      this.on('money', moneyHandler)\n      this.on('error', errorHandler)\n      this.on('end', endHandler)\n    })\n  }\n\n  /**\n   * (Internal) Determine how much more the stream can receive\n   * (Used by the Connection class but not meant to be part of the public API)\n   * @private\n   */\n  _getAmountStreamCanReceive(): Long {\n    if (this._receiveMax.lessThan(this._totalReceived)) {\n      return Long.UZERO\n    }\n    return checkedSubtract(this._receiveMax, this._totalReceived).difference\n  }\n\n  /**\n   * (Internal) Add money to the stream (from an external source)\n   * (Used by the Connection class but not meant to be part of the public API)\n   * @private\n   */\n  _addToIncoming(amount: Long, prepare: IlpPrepare): void {\n    // If this overflows, it will als be caught (and handled) at the connection level.\n    this._totalReceived = checkedAdd(this._totalReceived, amount).sum\n    this.log.trace('received %s (totalReceived: %s)', amount, this._totalReceived)\n    this.emit('money', amount.toString(), prepare)\n  }\n\n  /**\n   * (Internal) Check how much is available to send\n   * (Used by the Connection class but not meant to be part of the public API)\n   * @private\n   */\n  _getAmountAvailableToSend(): Long {\n    if (this.closed) {\n      return Long.UZERO\n    }\n    const amountAvailable = checkedSubtract(\n      checkedSubtract(this._sendMax, this._totalSent).difference,\n      this._outgoingHeldAmount\n    ).difference\n    return amountAvailable\n  }\n\n  /**\n   * (Internal) Hold outgoing balance\n   * (Used by the Connection class but not meant to be part of the public API)\n   * @private\n   */\n  _holdOutgoing(holdId: string, maxAmount?: Long): Long {\n    const amountAvailable = this._getAmountAvailableToSend()\n    const amountToHold = maxAmount ? minLong(amountAvailable, maxAmount) : amountAvailable\n    if (amountToHold.greaterThan(0)) {\n      this._outgoingHeldAmount = this._outgoingHeldAmount.add(amountToHold)\n      this.holds[holdId] = amountToHold\n      this.log.trace('holding outgoing balance. holdId: %s, amount: %s', holdId, amountToHold)\n    }\n    return amountToHold\n  }\n\n  /**\n   * (Internal) Execute hold when money has been successfully transferred\n   * (Used by the Connection class but not meant to be part of the public API)\n   * @private\n   */\n  _executeHold(holdId: string): void {\n    if (!this.holds[holdId]) {\n      return\n    }\n    const amount = this.holds[holdId]\n    this._outgoingHeldAmount = this._outgoingHeldAmount.subtract(amount)\n    this._totalSent = this._totalSent.add(amount)\n    delete this.holds[holdId]\n    this.log.trace('executed holdId: %s for: %s', holdId, amount)\n    this.emit('outgoing_money', amount.toString())\n\n    if (this._totalSent.greaterThanOrEqual(this._sendMax)) {\n      this.log.debug('outgoing total sent')\n      this.emit('outgoing_total_sent')\n    }\n  }\n\n  /**\n   * (Internal) Cancel hold if sending money failed\n   * (Used by the Connection class but not meant to be part of the public API)\n   * @private\n   */\n  _cancelHold(holdId: string): void {\n    if (!this.holds[holdId]) {\n      return\n    }\n    const amount = this.holds[holdId]\n    this.log.trace('cancelled holdId: %s for: %s', holdId, amount)\n    this._outgoingHeldAmount = this._outgoingHeldAmount.subtract(amount)\n    delete this.holds[holdId]\n  }\n\n  /**\n   * (Called internally by the Node Stream when the stream ends)\n   * @private\n   */\n  _final(callback: (error: Error | null | undefined) => void): void {\n    this.log.info('stream is closing')\n    const finish = (err?: Error) => {\n      if (err) {\n        this.log.debug('error waiting for money to be sent:', err)\n      }\n      this.log.info('stream ended')\n      this._closed = true\n      // Only emit the 'close' & 'end' events if the stream doesn't automatically\n      setTimeout(() => {\n        if (!this.emittedEnd) {\n          this.emittedEnd = true\n          this.safeEmit('end')\n        }\n        if (!this.emittedClose) {\n          this.emittedClose = true\n          this.safeEmit('close')\n        }\n      })\n      callback(err)\n    }\n\n    if (this._remoteSentEnd || this._sendMax.lessThanOrEqual(this._totalSent)) {\n      finish()\n    } else {\n      this.log.info('waiting to finish sending money before ending stream')\n\n      new Promise((resolve, reject) => {\n        this.once('outgoing_total_sent', resolve)\n        this.once('_send_loop_finished', resolve)\n        this.once('error', (error: Error) => reject(error))\n      })\n        .then(() => finish())\n        .catch(finish)\n    }\n  }\n\n  /**\n   * (Called internally by the Node Stream when stream.destroy is called)\n   * @private\n   */\n  _destroy(error: Error | null, callback: (error: Error | null) => void): void {\n    this.log.error('destroying stream because of error:', error)\n    this._closed = true\n    if (error) {\n      this._errorMessage = error.message\n    }\n    // Only emit the 'close' & 'end' events if the stream doesn't automatically\n    setTimeout(() => {\n      if (!this.emittedEnd) {\n        this.emittedEnd = true\n        this.safeEmit('end')\n      }\n      if (!this.emittedClose) {\n        this.emittedClose = true\n        this.safeEmit('close')\n      }\n    })\n    callback(error)\n  }\n\n  /**\n   * (Called internally by the Node Stream when stream.write is called)\n   * @private\n   */\n  _write(chunk: Buffer, encoding: string, callback: () => void): void {\n    this.log.trace('%d bytes written to the outgoing data queue', chunk.length)\n    this._outgoingData.push(chunk, callback)\n    this.emit('_maybe_start_send_loop')\n  }\n\n  /**\n   * (Called internally by the Node Stream when stream.write is called)\n   * @private\n   */\n  _writev(chunks: { chunk: Buffer; encoding: string }[], callback: () => void): void {\n    for (let i = 0; i < chunks.length; i++) {\n      const chunk = chunks[i]\n      this.log.trace('%d bytes written to the outgoing data queue', chunk.chunk.length)\n      // Only call the callback when the last chunk has been sent out\n      if (i === chunks.length - 1) {\n        this._outgoingData.push(chunk.chunk, callback)\n      } else {\n        this._outgoingData.push(chunk.chunk)\n      }\n    }\n    this.emit('_maybe_start_send_loop')\n  }\n\n  /**\n   * (Called internally by the Node Stream when stream.read is called)\n   * @private\n   */\n  _read(size: number): void {\n    const data = this._incomingData.read()\n    if (!data) {\n      // Let the peer know that this stream can receive more data.\n      // Don't call immediately since looping before the read() has finished\n      // would report incorrect offsets.\n      if (this['readableFlowing'] !== true) {\n        setTimeout(() => this.emit('_maybe_start_send_loop'))\n      }\n      return\n    }\n    this.push(data)\n    if (data.length < size) {\n      this._read(size - data.length)\n    }\n  }\n\n  /**\n   * (Used by the Connection class but not meant to be part of the public API)\n   * @private\n   */\n  _hasDataToSend(): boolean {\n    return !this._outgoingData.isEmpty() || this._outgoingDataToRetry.length > 0\n  }\n\n  /**\n   * (Used by the Connection class but not meant to be part of the public API)\n   * @private\n   */\n  _getAvailableDataToSend(size: number): { data: Buffer | undefined; offset: number } {\n    // See if we have data that needs to be resent\n    if (this._outgoingDataToRetry.length > 0) {\n      const toSend = this._outgoingDataToRetry[0]\n      if (toSend.data.length > size) {\n        const data = toSend.data.slice(0, size)\n        const offset = toSend.offset\n        toSend.data = toSend.data.slice(size)\n        toSend.offset = toSend.offset + size\n        return { data, offset }\n      } else {\n        this._outgoingDataToRetry.shift()\n        return toSend\n      }\n    }\n\n    // Send new data if the remote can receive more data\n    const maxBytes = Math.min(size, this._remoteMaxOffset - this.outgoingOffset)\n    const offset = this.outgoingOffset\n    const data = this._outgoingData.read(maxBytes)\n    if (data && data.length > 0) {\n      this.outgoingOffset += data.length\n      this.log.trace('%d bytes taken from the outgoing data queue', data.length)\n    }\n    return { data, offset }\n  }\n\n  /**\n   * (Used by the Connection class but not meant to be part of the public API)\n   * @private\n   */\n  _resendOutgoingData(data: Buffer, offset: number) {\n    this.log.trace('re-queuing %d bytes of data starting at offset %d', data.length, offset)\n    this._outgoingDataToRetry.push({ data, offset })\n  }\n\n  /**\n   * (Used by the Connection class but not meant to be part of the public API)\n   * @private\n   */\n  _isDataBlocked(): number | undefined {\n    if (this._remoteMaxOffset < this.outgoingOffset + this._outgoingData.byteLength()) {\n      return this.outgoingOffset + this._outgoingData.byteLength()\n    }\n  }\n\n  /**\n   * (Used by the Connection class but not meant to be part of the public API)\n   * @private\n   */\n  _getOutgoingOffsets(): { current: number; max: number } {\n    return {\n      current: this.outgoingOffset,\n      max: this.outgoingOffset + this._outgoingData.byteLength(),\n    }\n  }\n\n  /**\n   * (Used by the Connection class but not meant to be part of the public API)\n   * @private\n   */\n  _getIncomingOffsets(): { max: number; current: number; maxAcceptable: number } {\n    return {\n      max: this._incomingData.maxOffset,\n      current: this._incomingData.readOffset,\n      maxAcceptable:\n        this._incomingData.readOffset + this.readableHighWaterMark - this.readableLength,\n    }\n  }\n\n  /**\n   * (Used by the Connection class but not meant to be part of the public API)\n   * @private\n   */\n  _pushIncomingData(data: Buffer, offset: number) {\n    this._incomingData.push(data, offset)\n\n    this._read(this.readableHighWaterMark - this.readableLength)\n  }\n\n  /**\n   * (Used by the Connection class but not meant to be part of the public API)\n   * @private\n   */\n  _remoteEnded(err?: Error): void {\n    this.log.info('remote closed stream')\n    this._remoteSentEnd = true\n    this._remoteClosed = true\n    if (err) {\n      this.destroy(err)\n    } else {\n      this.push(null)\n      this.end()\n    }\n  }\n\n  /**\n   * (Used by the Connection class but not meant to be part of the public API)\n   * @private\n   */\n  _setReceipt(receipt: Buffer): void {\n    this._receipt = receipt\n  }\n\n  protected safeEmit(...args: Parameters<typeof Duplex.prototype.emit>) {\n    const event = args[0]\n    try {\n      this.emit(...args)\n    } catch (err) {\n      this.log.debug('error in %s handler: %s', event, err)\n    }\n  }\n}\n"]}