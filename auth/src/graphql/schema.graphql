type Query {
  "Fetch a page of grants."
  grants(
    "Paginating forwards: the cursor before the the requested page."
    after: String
    "Paginating backwards: the cursor after the the requested page."
    before: String
    "Paginating forwards: The first **n** elements from the page."
    first: Int
    "Paginating backwards: The last **n** elements from the page."
    last: Int
    "Filter grants based on specific criteria."
    filter: GrantFilter
  ): GrantsConnection!

  "Fetch a grant"
  grant(id: ID!): Grant!
}

type Mutation {
  "Revoke Grant"
  revokeGrant(input: RevokeGrantInput!): RevokeGrantMutationResponse!
}

type PageInfo {
  "Paginating forwards: the cursor to continue."
  endCursor: String
  "Paginating forwards: Are there more pages?"
  hasNextPage: Boolean!
  "Paginating backwards: Are there more pages?"
  hasPreviousPage: Boolean!
  "Paginating backwards: the cursor to continue."
  startCursor: String
}

type GrantsConnection {
  pageInfo: PageInfo!
  edges: [GrantEdge!]!
}

type GrantEdge {
  node: Grant!
  cursor: String!
}

input GrantFilter {
  identifier: FilterString
  state: FilterGrantState
  finalizationReason: FilterFinalizationReason
}

input FilterString {
  in: [String!]
}

input FilterGrantState {
  in: [GrantState!]
  notIn: [GrantState!]
}

input FilterFinalizationReason {
  in: [GrantFinalization!]
  notIn: [GrantFinalization!]
}

input RevokeGrantInput {
  grantId: String!
}

interface Model {
  id: ID!
  createdAt: String!
}

type Grant implements Model {
  "Grant id"
  id: ID!
  "Wallet address of the grantee's account"
  client: String!
  "Access details"
  access: [Access!]!
  "State of the grant"
  state: GrantState!
  "Reason a grant was finalized"
  finalizationReason: GrantFinalization
  "Date-time of creation"
  createdAt: String!
}

type Access implements Model {
  "Access id"
  id: ID!
  "Wallet address of a sub-resource (incoming payment, outgoing payment, or quote)"
  identifier: String
  "Access type (incoming payment, outgoing payment, or quote)"
  type: String!
  "Access action (create, read, list or complete)"
  actions: [String]!
  "Payment limits"
  limits: LimitData
  "Date-time of creation"
  createdAt: String!
}

type LimitData {
  "Wallet address URL of the receiver"
  receiver: String
  "Amount to debit"
  debitAmount: PaymentAmount
  "Amount to receive"
  receiveAmount: PaymentAmount
  "Interval between payments"
  interval: String
}

type PaymentAmount {
  value: UInt64!
  "[ISO 4217 currency code](https://en.wikipedia.org/wiki/ISO_4217), e.g. `USD`"
  assetCode: String!
  "Difference in orders of magnitude between the standard unit of an asset and a corresponding fractional unit"
  assetScale: UInt8!
}

type RevokeGrantMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

interface MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

enum GrantState {
  "grant request is determining what state to enter next"
  PROCESSING
  "grant request is awaiting interaction"
  PENDING
  "grant was approved"
  APPROVED
  "grant was finalized and no more access tokens or interactions can be made on it"
  FINALIZED
}

enum GrantFinalization {
  "grant was issued"
  ISSUED
  "grant was revoked"
  REVOKED
  "grant was rejected"
  REJECTED
}

scalar UInt8
scalar UInt64
